{
  "openapi": "3.0.1",
  "info": {
    "title": "Mindera Lims",
    "description": "APIs for Mindera lims",
    "version": "0.0"
  },
  "paths": {
    "/audit-trails": {
      "get": {
        "tags": [
          "Audit Trail"
        ],
        "summary": "This function fetches all audit trails from the database and returns them as a response",
        "description": "This function fetches all audit trails from the database and returns them as a response",
        "operationId": "fetchAll",
        "parameters": [
          {
            "name": "queryParams",
            "in": "query",
            "description": "The query parameters that will be passed to the service.",
            "required": true,
            "schema": {
              "type": "object",
              "additionalProperties": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A list of audit trails",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Object"
                }
              }
            }
          }
        }
      }
    },
    "/audit-trails/filter-attributes": {
      "get": {
        "tags": [
          "Audit Trail"
        ],
        "summary": "It returns a list of all the filter attributes that can be used to filter the audit trail",
        "description": "It returns a list of all the filter attributes that can be used to filter the audit trail",
        "operationId": "fetchFilterAttributes",
        "parameters": [],
        "responses": {
          "200": {
            "description": "A list of filter attributes",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Object"
                }
              }
            }
          }
        }
      }
    },
    "/billing-request": {
      "get": {
        "tags": [
          "Billing Request"
        ],
        "summary": "This function fetches all billing requests from the database and returns them as a response",
        "description": "This function fetches all billing requests from the database and returns them as a response",
        "operationId": "fetchAll_1",
        "parameters": [
          {
            "name": "queryParams",
            "in": "query",
            "description": "The query parameters that will be passed to the service.",
            "required": true,
            "schema": {
              "type": "object",
              "additionalProperties": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A list of billing requests",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Object"
                }
              }
            }
          }
        }
      }
    },
    "/billing-request/addmock": {
      "post": {
        "tags": [
          "Billing Request"
        ],
        "summary": "This function adds a mock billing request to the database and logs the action in the audit trail table",
        "description": "This function adds a mock billing request to the database and logs the action in the audit trail table",
        "operationId": "addMockBillingRequest",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "A HttpResponse object",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Object"
                }
              }
            }
          }
        }
      }
    },
    "/billing-request/export": {
      "get": {
        "tags": [
          "Billing Request"
        ],
        "summary": "Endpoint for downloading data for billing list to excel file.",
        "description": "Endpoint for downloading data for billing list to excel file.",
        "operationId": "exportToExcel",
        "parameters": [
          {
            "name": "queryParams",
            "in": "query",
            "description": "The queryParams.",
            "required": false,
            "schema": {
              "type": "object",
              "additionalProperties": true,
              "nullable": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "HttpResponse",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          }
        }
      }
    },
    "/billing-request/filter-attributes": {
      "get": {
        "tags": [
          "Billing Request"
        ],
        "summary": "This function fetches the filter attributes for the billing request",
        "description": "This function fetches the filter attributes for the billing request",
        "operationId": "fetchFilterAttributes_1",
        "parameters": [],
        "responses": {
          "200": {
            "description": "HttpResponse.ok(response)",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Object"
                }
              }
            }
          }
        }
      }
    },
    "/billing-request/test/{id}": {
      "post": {
        "tags": [
          "Billing Request"
        ],
        "summary": "This function takes in an accession_id, and returns a response from the\n billingRequestService.testBillingXifin(accession_id) function",
        "description": "This function takes in an accession_id, and returns a response from the\n billingRequestService.testBillingXifin(accession_id) function",
        "operationId": "submitBillingTestXifin",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The accession id of the test you want to submit.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response is a string that is the result of the test.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Object"
                }
              }
            }
          }
        }
      }
    },
    "/billing-request/{id}": {
      "get": {
        "tags": [
          "Billing Request"
        ],
        "summary": "The function fetches a billing request by id",
        "description": "The function fetches a billing request by id",
        "operationId": "fetchById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id of the billing request to fetch.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "HttpResponse.ok(billingRequest)",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Object"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Billing Request"
        ],
        "summary": "This function updates a billing request with the given accession id and billing request object",
        "description": "This function updates a billing request with the given accession id and billing request object",
        "operationId": "update",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id of the billing request to be updated",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "This is the object that will be updated.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BillingRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "HttpResponse.ok(updatedBillingRequest)",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Object"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Billing Request"
        ],
        "summary": "This function is called when a POST request is made to the endpoint `/and it will execute on the IO thread\n pool. It will also create an audit trail entry in the `billing_requests` table with the message `billing request\n submitted to xifin` and the `accession_id` will be the value of the `accession_id` path variable",
        "description": "This function is called when a POST request is made to the endpoint `/and it will execute on the IO thread\n pool. It will also create an audit trail entry in the `billing_requests` table with the message `billing request\n submitted to xifin` and the `accession_id` will be the value of the `accession_id` path variable",
        "operationId": "submitBilling",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The accession id of the billing request",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "HttpResponse.ok(response)",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Object"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Billing Request"
        ],
        "summary": "The function deletes a billing request and logs the action in the audit trail table",
        "description": "The function deletes a billing request and logs the action in the audit trail table",
        "operationId": "delete",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id of the billing request to be deleted",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "HttpResponse.ok()",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Object"
                }
              }
            }
          }
        }
      }
    },
    "/client": {
      "get": {
        "tags": [
          "Client"
        ],
        "summary": "Fetch list of provider.",
        "description": "Fetch list of provider.",
        "operationId": "getAll",
        "parameters": [
          {
            "name": "queryParams",
            "in": "query",
            "description": "queryParams from client side.",
            "required": true,
            "schema": {
              "type": "object",
              "additionalProperties": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "httpResponse",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": true
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Client"
        ],
        "summary": "The function is annotated with `and `which means that the function will be\n executed asynchronously on a separate thread. The function takes a `SalesForceClientDto` as input and returns a\n `HttpResponse` as output. The `annotation tells the framework that the input is in the\n body of the request. The `annotation tells the framework to validate the input using the `javax.validation`\n annotations on the `SalesForceClientDto` class. The `annotation tells the framework to validate the\n input using the `javax.validation` annotations on the function itself",
        "description": "The function is annotated with `and `which means that the function will be\n executed asynchronously on a separate thread. The function takes a `SalesForceClientDto` as input and returns a\n `HttpResponse` as output. The `annotation tells the framework that the input is in the\n body of the request. The `annotation tells the framework to validate the input using the `javax.validation`\n annotations on the `SalesForceClientDto` class. The `annotation tells the framework to validate the\n input using the `javax.validation` annotations on the function itself",
        "operationId": "upsert",
        "parameters": [],
        "requestBody": {
          "description": "This is the object that will be passed to the method.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SalesForceClientDto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "HttpResponse.created(salesForceClientDto)",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SalesForceClientDto"
                }
              }
            }
          }
        }
      }
    },
    "/client/get-token": {
      "post": {
        "tags": [
          "Client"
        ],
        "summary": "This function will return a SalesForceToken object if the apiKey and apiSecret are valid",
        "description": "This function will return a SalesForceToken object if the apiKey and apiSecret are valid",
        "operationId": "login",
        "parameters": [
          {
            "name": "api_key",
            "in": "header",
            "description": "The API key that you created in the previous step.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "api_secret",
            "in": "header",
            "description": "The API secret that you received when you registered your app.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "HttpResponse",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SalesForceToken"
                }
              }
            }
          }
        }
      }
    },
    "/client/{clientId}": {
      "get": {
        "tags": [
          "Client"
        ],
        "summary": "Find a provider by clientId, or throw an error if not found",
        "description": "Find a provider by clientId, or throw an error if not found",
        "operationId": "findByClientId",
        "parameters": [
          {
            "name": "clientId",
            "in": "path",
            "description": "The clientId of the provider to be retrieved.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "HttpResponse",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Provider"
                }
              }
            }
          }
        }
      }
    },
    "/disease": {
      "get": {
        "tags": [
          "Disease"
        ],
        "summary": "",
        "description": "",
        "operationId": "getAll_1",
        "parameters": [
          {
            "name": "queryParams",
            "in": "query",
            "description": "HashMap\n Fetch list of test requisition for table.",
            "required": true,
            "schema": {
              "type": "object",
              "additionalProperties": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "HTTPResponse with list of disease object.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Disease"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/document/delete/{documentId}": {
      "delete": {
        "tags": [
          "Document"
        ],
        "summary": "It deletes a document from the database",
        "description": "It deletes a document from the database",
        "operationId": "deleteFile",
        "parameters": [
          {
            "name": "documentId",
            "in": "path",
            "description": "The id of the document to be deleted.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "HttpResponse.ok(\"Document Deleted successfully\");",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/document/download/{module_name}/{module_id}/{file_name}": {
      "get": {
        "tags": [
          "Document"
        ],
        "summary": "It downloads a file from the database and returns it as a byte array",
        "description": "It downloads a file from the database and returns it as a byte array",
        "operationId": "downloadFile",
        "parameters": [
          {
            "name": "module_name",
            "in": "path",
            "description": "The name of the module that the file is associated with.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "module_id",
            "in": "path",
            "description": "The id of the module that the file is associated with.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "file_name",
            "in": "path",
            "description": "The name of the file to be downloaded.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "HttpResponse",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "format": "byte"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/document/get/{module_name}/{module_id}/{file_name}": {
      "get": {
        "tags": [
          "Document"
        ],
        "summary": "It takes in a module name, module id, and file name, and returns the file as a base64 encoded string",
        "description": "It takes in a module name, module id, and file name, and returns the file as a base64 encoded string",
        "operationId": "getFile",
        "parameters": [
          {
            "name": "module_name",
            "in": "path",
            "description": "The name of the module that the file is associated with.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "module_id",
            "in": "path",
            "description": "The id of the module that the file is associated with.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "file_name",
            "in": "path",
            "description": "The name of the file to be uploaded.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The file is being returned as a base64 encoded string.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/document/module/{module_name}/{module_id}": {
      "get": {
        "tags": [
          "Document"
        ],
        "summary": "This function returns a list of documents that are associated with a module",
        "description": "This function returns a list of documents that are associated with a module",
        "operationId": "getModuleFiles",
        "parameters": [
          {
            "name": "module_name",
            "in": "path",
            "description": "The name of the module that the document is associated with.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "module_id",
            "in": "path",
            "description": "The id of the module",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A list of documents",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Document"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/document/upload/{module_name}/{module_id}/{document_type}": {
      "post": {
        "tags": [
          "Document"
        ],
        "summary": "It takes a file upload, saves it to the database, and returns the saved document",
        "description": "It takes a file upload, saves it to the database, and returns the saved document",
        "operationId": "uploadFile",
        "parameters": [
          {
            "name": "module_name",
            "in": "path",
            "description": "The name of the module that the document is associated with.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "module_id",
            "in": "path",
            "description": "The id of the module to which the document belongs.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "document_type",
            "in": "path",
            "description": "This is the type of document that is being uploaded. For example, if you are uploading a\n document for a user, you can use \"profile_picture\" as the document type.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "file": {
                    "type": "string",
                    "description": "The file that was uploaded",
                    "format": "binary"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "HttpResponse.ok(savedDoc)",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Document"
                }
              }
            }
          }
        }
      }
    },
    "/drugs": {
      "get": {
        "tags": [
          "Drugs"
        ],
        "summary": "Endpoint to get all the drug details",
        "description": "Endpoint to get all the drug details",
        "operationId": "getAll_2",
        "parameters": [],
        "responses": {
          "200": {
            "description": "HttpResponse",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Object"
                }
              }
            }
          }
        }
      }
    },
    "/emr": {
      "post": {
        "tags": [
          "EMR"
        ],
        "summary": "It takes a JSON object as input, validates it, and saves it to the database",
        "description": "It takes a JSON object as input, validates it, and saves it to the database",
        "operationId": "createEMRTrf",
        "parameters": [
          {
            "name": "emrApiKey",
            "in": "header",
            "description": "This is the key that is provided by the EMR team. This key is used to authenticate the request.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "This is the object that will be sent from the EMR.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TestRequisitionRevisionDto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "HttpResponse.created(testRequisitionRevision)",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TestRequisitionRevisionDto"
                }
              }
            }
          }
        }
      }
    },
    "/emr/info": {
      "get": {
        "tags": [
          "EMR"
        ],
        "summary": "This function is a GET request that returns a list of EMRInfo objects",
        "description": "This function is a GET request that returns a list of EMRInfo objects",
        "operationId": "getAllEmrInfo",
        "parameters": [
          {
            "name": "emrApiKey",
            "in": "header",
            "description": "This is the key that the EMR will use to authenticate itself.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A list of EmrInfo objects",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/EmrInfo"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "EMR"
        ],
        "summary": "It takes in a JSON object, and saves it to the database",
        "description": "It takes in a JSON object, and saves it to the database",
        "operationId": "saveEmrInfo",
        "parameters": [
          {
            "name": "emrApiKey",
            "in": "header",
            "description": "This is the key that is passed in the header of the request. This key is used to authenticate the\n request.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "This is the object that contains the information that is to be saved in the database.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EmrInfoDto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "HttpResponse.created(emrInfo)",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EmrInfoDto"
                }
              }
            }
          }
        }
      }
    },
    "/emr/provider-list": {
      "get": {
        "tags": [
          "EMR"
        ],
        "summary": "This function is used to retrieve a list of providers from the database",
        "description": "This function is used to retrieve a list of providers from the database",
        "operationId": "getProvider",
        "parameters": [
          {
            "name": "emrApiKey",
            "in": "header",
            "description": "This is the key that is passed in the header of the request. This key is used to authenticate the\n request.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A list of providers with EMR info",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Object"
                }
              }
            }
          }
        }
      }
    },
    "/emr/upload/{module_name}/{module_id}/{document_type}": {
      "post": {
        "tags": [
          "EMR"
        ],
        "summary": "It uploads a file to the server and saves it in the database",
        "description": "It uploads a file to the server and saves it in the database",
        "operationId": "uploadFile_1",
        "parameters": [
          {
            "name": "module_name",
            "in": "path",
            "description": "The module name for which the document is being uploaded.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "module_id",
            "in": "path",
            "description": "This is the unique ID of the module. For example, if you are uploading a document for a patient,\n this will be the patient ID.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "document_type",
            "in": "path",
            "description": "This is the type of document that is being uploaded. It can be any of the following:",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "emrApiKey",
            "in": "header",
            "description": "This is the key that you will provide to the EMR. This key will be used to authenticate the request.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "file": {
                    "type": "string",
                    "description": "The file that is being uploaded",
                    "format": "binary"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "HttpResponse.ok(savedDoc)",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Document"
                }
              }
            }
          }
        }
      }
    },
    "/health/getTime": {
      "get": {
        "tags": [
          "Health"
        ],
        "summary": "The function is secured by the Spring Security framework. The function is accessible only if the user is anonymous",
        "description": "The function is secured by the Spring Security framework. The function is accessible only if the user is anonymous",
        "operationId": "getTime",
        "parameters": [],
        "responses": {
          "200": {
            "description": "A String",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/instrument": {
      "get": {
        "tags": [
          "Instrument"
        ],
        "summary": "Fetches all instruments",
        "description": "Fetches all instruments",
        "operationId": "fetchAll_2",
        "parameters": [],
        "responses": {
          "200": {
            "description": "HttpResponse",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Instruments"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/instrument/{id}": {
      "get": {
        "tags": [
          "Instrument"
        ],
        "summary": "The function returns an HTTP response with a status code of 200 and a body containing the result of the `findById`\n function",
        "description": "The function returns an HTTP response with a status code of 200 and a body containing the result of the `findById`\n function",
        "operationId": "fetchById_1",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id of the instrument to fetch",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "HttpResponse.ok(instrumentsService.findById(id));",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Instruments"
                }
              }
            }
          }
        }
      }
    },
    "/ldap/query": {
      "get": {
        "tags": [
          "Ldap"
        ],
        "summary": "This function will return a list of LDAP users with the role specified in the query parameter",
        "description": "This function will return a list of LDAP users with the role specified in the query parameter",
        "operationId": "getUserListWithQuery",
        "parameters": [
          {
            "name": "queryParams",
            "in": "query",
            "description": "This is the query parameter that is passed in the URL.",
            "required": true,
            "schema": {
              "type": "object",
              "additionalProperties": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A list of LDAP users",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Object"
                }
              }
            }
          }
        }
      }
    },
    "/ldap/save": {
      "post": {
        "tags": [
          "Ldap"
        ],
        "summary": "Retrieve and save LDAP Users",
        "description": "Retrieve and save LDAP Users",
        "operationId": "saveUserList",
        "parameters": [],
        "requestBody": {
          "description": "This is the parameter that will be passed to the endpoint.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LdapUserController.UserParam"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "A list of users",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Object"
                }
              }
            }
          }
        }
      }
    },
    "/ldap/users": {
      "get": {
        "tags": [
          "Ldap"
        ],
        "summary": "This function retrieves all LDAP users and returns them as a JSON response",
        "description": "This function retrieves all LDAP users and returns them as a JSON response",
        "operationId": "getUserList",
        "parameters": [],
        "responses": {
          "200": {
            "description": "HttpResponse.ok(ldapUsers)",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Object"
                }
              }
            }
          }
        }
      }
    },
    "/material": {
      "get": {
        "tags": [
          "Material"
        ],
        "summary": "Fetches all the materials",
        "description": "Fetches all the materials",
        "operationId": "fetchAll_3",
        "parameters": [],
        "responses": {
          "200": {
            "description": "HttpResponse",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Materials"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/material/{id}": {
      "get": {
        "tags": [
          "Material"
        ],
        "summary": "Fetches material by Id",
        "description": "Fetches material by Id",
        "operationId": "fetchById_2",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The material id.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "HttpResponse",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Materials"
                }
              }
            }
          }
        }
      }
    },
    "/patient": {
      "get": {
        "tags": [
          "Patient"
        ],
        "summary": "Fetch list of test requisition for table.",
        "description": "Fetch list of test requisition for table.",
        "operationId": "getAll_3",
        "parameters": [
          {
            "name": "queryParams",
            "in": "query",
            "description": "This hold query object.",
            "required": true,
            "schema": {
              "type": "object",
              "additionalProperties": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "HashMap",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": true
                }
              }
            }
          }
        }
      }
    },
    "/patient-reports": {
      "get": {
        "tags": [
          "Patient Reports"
        ],
        "summary": "Endpoint to get all the patient reports",
        "description": "Endpoint to get all the patient reports",
        "operationId": "getAll_4",
        "parameters": [
          {
            "name": "queryParams",
            "in": "query",
            "description": "The query params",
            "required": false,
            "schema": {
              "type": "object",
              "additionalProperties": true,
              "nullable": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Lists of patient reports and total count",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Object"
                }
              }
            }
          }
        }
      },
      "patch": {
        "tags": [
          "Patient Reports"
        ],
        "summary": "This function is used to update the patient report",
        "description": "This function is used to update the patient report",
        "operationId": "updateBatch",
        "parameters": [],
        "requestBody": {
          "description": "The object that will be updated.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PatientReportDto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "HttpResponse",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Object"
                }
              }
            }
          }
        }
      }
    },
    "/patient-reports/export-patient-report-excel": {
      "get": {
        "tags": [
          "Patient Reports"
        ],
        "summary": "Endpoint for downloading data for patient-report to excel file.",
        "description": "Endpoint for downloading data for patient-report to excel file.",
        "operationId": "exportToExcel_1",
        "parameters": [
          {
            "name": "queryParams",
            "in": "query",
            "description": "The queryParams.",
            "required": false,
            "schema": {
              "type": "object",
              "additionalProperties": true,
              "nullable": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "HttpResponse",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          }
        }
      }
    },
    "/patient-reports/fillable-reports/{id}": {
      "get": {
        "tags": [
          "Patient Reports"
        ],
        "summary": "Endpoint to fetch the patient reports pdf by id",
        "description": "Endpoint to fetch the patient reports pdf by id",
        "operationId": "getPatientReportsPdf",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The patient report id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "HttpResponse for single patient report",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Object"
                }
              }
            }
          }
        }
      }
    },
    "/patient-reports/filter-attributes": {
      "get": {
        "tags": [
          "Patient Reports"
        ],
        "summary": "Endpoint to fetch the filter attributes",
        "description": "Endpoint to fetch the filter attributes",
        "operationId": "getFilterAttribute",
        "parameters": [],
        "responses": {
          "200": {
            "description": "HttpResponse",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PatientReportFilterDTO"
                }
              }
            }
          }
        }
      }
    },
    "/patient-reports/{id}": {
      "get": {
        "tags": [
          "Patient Reports"
        ],
        "summary": "Endpoint to fetch the patient report detail by id",
        "description": "Endpoint to fetch the patient report detail by id",
        "operationId": "get",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The patient report id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "HttpResponse for single patient report",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Object"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Patient Reports"
        ],
        "summary": "Endpoint to get all the patient reports",
        "description": "Endpoint to get all the patient reports",
        "operationId": "delete_1",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Lists of patient reports and total count",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Object"
                }
              }
            }
          }
        }
      },
      "patch": {
        "tags": [
          "Patient Reports"
        ],
        "summary": "Endpoint to update the patient report detail by id",
        "description": "Endpoint to update the patient report detail by id",
        "operationId": "update_1",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The patient report id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "description": "The patient report detail to update",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PatientReportDto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "HttpResponse for single patient report",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PatientReport"
                }
              }
            }
          }
        }
      }
    },
    "/patient/latest-payment-info/{patientId}": {
      "get": {
        "tags": [
          "Patient"
        ],
        "summary": "Fetch latest payment Info of patient.",
        "description": "Fetch latest payment Info of patient.",
        "operationId": "getLatestPaymentInfo",
        "parameters": [
          {
            "name": "patientId",
            "in": "path",
            "description": "this holds patient Id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "this return list of testRequisitionRevision",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TestRequisitionRevision"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/payer": {
      "get": {
        "tags": [
          "Payer"
        ],
        "summary": "Fetch list of test requisition for table.",
        "description": "Fetch list of test requisition for table.",
        "operationId": "getAll_5",
        "parameters": [
          {
            "name": "queryParams",
            "in": "query",
            "description": "This holds the query requested",
            "required": true,
            "schema": {
              "type": "object",
              "additionalProperties": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "HttpResponse with test requisition list",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": true
                }
              }
            }
          }
        }
      }
    },
    "/payer/xifin/sync": {
      "post": {
        "tags": [
          "Payer"
        ],
        "summary": "It takes a POST request to the endpoint `/xifin/sync` and calls the `loadPayers` function in the\n `xifinPayerImportService` class",
        "description": "It takes a POST request to the endpoint `/xifin/sync` and calls the `loadPayers` function in the\n `xifinPayerImportService` class",
        "operationId": "syncXifinPayers",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "HttpResponse.ok(\"Successfully synced xifin payers in lims\");",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/physician": {
      "get": {
        "tags": [
          "Physician"
        ],
        "summary": "Fetch list of test requisition for table.",
        "description": "Fetch list of test requisition for table.",
        "operationId": "getAll_6",
        "parameters": [
          {
            "name": "queryParams",
            "in": "query",
            "description": "This holds queryParams send from client side.",
            "required": true,
            "schema": {
              "type": "object",
              "additionalProperties": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "httpResponse with list of physician",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": true
                }
              }
            }
          }
        }
      }
    },
    "/provider": {
      "get": {
        "tags": [
          "Provider"
        ],
        "summary": "Fetch list of provider.",
        "description": "Fetch list of provider.",
        "operationId": "getAll_7",
        "parameters": [
          {
            "name": "queryParams",
            "in": "query",
            "description": "This holds queryParams send from client side.",
            "required": true,
            "schema": {
              "type": "object",
              "additionalProperties": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "httpResponse with list of provider.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": true
                }
              }
            }
          }
        }
      }
    },
    "/provider-client/change-password": {
      "post": {
        "tags": [
          "Provider Client"
        ],
        "summary": "Change Password when Challenge type is FORCE_CHANGE_PASSWORD",
        "description": "Change Password when Challenge type is FORCE_CHANGE_PASSWORD",
        "operationId": "changePassword",
        "parameters": [],
        "requestBody": {
          "description": "This holds payload send from client side.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ChangeCognitoAuthenticationRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "httpResponse",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": true
                }
              }
            }
          }
        }
      }
    },
    "/provider-client/disease": {
      "get": {
        "tags": [
          "Provider Client - Disease"
        ],
        "summary": "Fetch list of test requisition for table.",
        "description": "Fetch list of test requisition for table.",
        "operationId": "getAll_8",
        "parameters": [
          {
            "name": "queryParams",
            "in": "query",
            "description": "This holds queryParams send from client side.",
            "required": true,
            "schema": {
              "type": "object",
              "additionalProperties": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "httpResponse with list of disease for provider",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Disease"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/provider-client/document/delete/{documentId}": {
      "delete": {
        "tags": [
          "Provider Client - Document"
        ],
        "summary": "It deletes a document from the database",
        "description": "It deletes a document from the database",
        "operationId": "deleteFile_1",
        "parameters": [
          {
            "name": "documentId",
            "in": "path",
            "description": "The id of the document to be deleted.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "HttpResponse.ok(\"Document Deleted successfully\");",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/provider-client/document/download/{module_name}/{module_id}/{file_name}": {
      "get": {
        "tags": [
          "Provider Client - Document"
        ],
        "summary": "It downloads a file from the server and returns it as a byte array",
        "description": "It downloads a file from the server and returns it as a byte array",
        "operationId": "downloadFile_1",
        "parameters": [
          {
            "name": "module_name",
            "in": "path",
            "description": "The name of the module that the file is associated with.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "module_id",
            "in": "path",
            "description": "The id of the module that the file is associated with.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "file_name",
            "in": "path",
            "description": "The name of the file to be downloaded.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "HttpResponse",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "format": "byte"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/provider-client/document/get/{module_name}/{module_id}/{file_name}": {
      "get": {
        "tags": [
          "Provider Client - Document"
        ],
        "summary": "It takes the module name, module id and file name as parameters and returns the file as a base64 encoded string",
        "description": "It takes the module name, module id and file name as parameters and returns the file as a base64 encoded string",
        "operationId": "getFile_1",
        "parameters": [
          {
            "name": "module_name",
            "in": "path",
            "description": "The name of the module that the file is associated with.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "module_id",
            "in": "path",
            "description": "The id of the module that the file is associated with.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "file_name",
            "in": "path",
            "description": "The name of the file to be uploaded.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The file is being returned as a base64 encoded string.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/provider-client/document/module/{module_name}/{module_id}": {
      "get": {
        "tags": [
          "Provider Client - Document"
        ],
        "operationId": "getModuleFiles_1",
        "parameters": [
          {
            "name": "module_name",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "module_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "getModuleFiles_1 200 response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Document"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/provider-client/document/upload/{module_name}/{module_id}/{document_type}": {
      "post": {
        "tags": [
          "Provider Client - Document"
        ],
        "summary": "It takes a file upload, saves it to the database, and returns the saved document",
        "description": "It takes a file upload, saves it to the database, and returns the saved document",
        "operationId": "uploadFile_2",
        "parameters": [
          {
            "name": "module_name",
            "in": "path",
            "description": "The name of the module that the document is associated with.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "module_id",
            "in": "path",
            "description": "The id of the module to which the document is attached.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "document_type",
            "in": "path",
            "description": "This is the type of document that is being uploaded. For example, if you are uploading a\n document for a client, the document type would be \"client\".",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "file": {
                    "type": "string",
                    "description": "The file that was uploaded",
                    "format": "binary"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "HttpResponse.ok(savedDoc)",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Document"
                }
              }
            }
          }
        }
      }
    },
    "/provider-client/drugs": {
      "get": {
        "tags": [
          "Provider Client - Drugs"
        ],
        "summary": "Fetch list of test requisition for table.",
        "description": "Fetch list of test requisition for table.",
        "operationId": "getAll_9",
        "parameters": [],
        "responses": {
          "200": {
            "description": "List of drugs",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DrugDto"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/provider-client/login": {
      "post": {
        "tags": [
          "Provider Client"
        ],
        "summary": "It takes a username and password, authenticates the user against the Cognito User Pool, and returns the user's\n attributes",
        "description": "It takes a username and password, authenticates the user against the Cognito User Pool, and returns the user's\n attributes",
        "operationId": "login_1",
        "parameters": [],
        "requestBody": {
          "description": "This is the object that contains the username and password.",
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/CognitoAuthenticationRequest"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CognitoAuthenticationRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "A map of the user's attributes.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": true
                }
              }
            }
          }
        }
      }
    },
    "/provider-client/patient": {
      "get": {
        "tags": [
          "Provider Client - Patient"
        ],
        "summary": "Fetch list of test requisition for table.",
        "description": "Fetch list of test requisition for table.",
        "operationId": "getAll_10",
        "parameters": [
          {
            "name": "queryParams",
            "in": "query",
            "description": "This holds query send from client side.",
            "required": true,
            "schema": {
              "type": "object",
              "additionalProperties": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "httpResponse with list of patient.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": true
                }
              }
            }
          }
        }
      }
    },
    "/provider-client/patient-reports": {
      "get": {
        "tags": [
          "Provider Client - Patient Reports"
        ],
        "summary": "Endpoint to get all the patient reports",
        "description": "Endpoint to get all the patient reports",
        "operationId": "getAllPatientListBelongsToProvider",
        "parameters": [
          {
            "name": "queryParams",
            "in": "query",
            "description": "The query params",
            "required": true,
            "schema": {
              "type": "object",
              "additionalProperties": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Lists of patient reports and total count",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Object"
                }
              }
            }
          }
        }
      }
    },
    "/provider-client/patient-reports/export-patient-report-excel": {
      "get": {
        "tags": [
          "Provider Client - Patient Reports"
        ],
        "summary": "Endpoint for downloading data for patient-report provider view to excel file.",
        "description": "Endpoint for downloading data for patient-report provider view to excel file.",
        "operationId": "exportPatientListForProvider",
        "parameters": [
          {
            "name": "queryParams",
            "in": "query",
            "description": "The queryParams.",
            "required": true,
            "schema": {
              "type": "object",
              "additionalProperties": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "HttpResponse",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          }
        }
      }
    },
    "/provider-client/patient-reports/fillable-reports/{id}": {
      "get": {
        "tags": [
          "Provider Client - Patient Reports"
        ],
        "summary": "Endpoint to fetch the patient reports pdf by id",
        "description": "Endpoint to fetch the patient reports pdf by id",
        "operationId": "getPatientReportsPdf_1",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The patient report id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "HttpResponse for single patient report",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Object"
                }
              }
            }
          }
        }
      }
    },
    "/provider-client/patient-reports/filter-attributes": {
      "get": {
        "tags": [
          "Provider Client - Patient Reports"
        ],
        "summary": "Endpoint to fetch the filter attributes",
        "description": "Endpoint to fetch the filter attributes",
        "operationId": "getFilterAttributeForProvider",
        "parameters": [],
        "responses": {
          "200": {
            "description": "HttpResponse",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Object"
                }
              }
            }
          }
        }
      }
    },
    "/provider-client/patient-reports/{id}": {
      "get": {
        "tags": [
          "Provider Client - Patient Reports"
        ],
        "summary": "Endpoint to fetch the patient report detail by id",
        "description": "Endpoint to fetch the patient report detail by id",
        "operationId": "get_1",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The patient report id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "HttpResponse for single patient report",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Object"
                }
              }
            }
          }
        }
      }
    },
    "/provider-client/patient/latest-payment-info/{patientId}": {
      "get": {
        "tags": [
          "Provider Client - Patient"
        ],
        "summary": "Fetch latest payment Info of patient.",
        "description": "Fetch latest payment Info of patient.",
        "operationId": "getLatestPaymentInfo_1",
        "parameters": [
          {
            "name": "patientId",
            "in": "path",
            "description": "this holds patientId send from client side.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "httpResponse with latest payment information of particular patient.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TestRequisitionRevision"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/provider-client/payer": {
      "get": {
        "tags": [
          "Provider Client - Payer"
        ],
        "summary": "Fetch list of test requisition for table.",
        "description": "Fetch list of test requisition for table.",
        "operationId": "getAll_11",
        "parameters": [
          {
            "name": "queryParams",
            "in": "query",
            "description": "This holds queryParams send from client",
            "required": true,
            "schema": {
              "type": "object",
              "additionalProperties": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "httpResponse with list of payer.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": true
                }
              }
            }
          }
        }
      }
    },
    "/provider-client/profile": {
      "get": {
        "tags": [
          "Provider Client"
        ],
        "summary": "Return Provider object from authorization token.",
        "description": "Return Provider object from authorization token.",
        "operationId": "getProfile",
        "parameters": [],
        "responses": {
          "200": {
            "description": "ProviderEntity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Provider"
                }
              }
            }
          }
        }
      }
    },
    "/provider-client/refresh": {
      "post": {
        "tags": [
          "Provider Client"
        ],
        "summary": "Refresh token using access token",
        "description": "Refresh token using access token",
        "operationId": "refresh",
        "parameters": [],
        "requestBody": {
          "description": "This holds queryParams send from client side.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "additionalProperties": {
                  "type": "string"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "httpResponse",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": true
                }
              }
            }
          }
        }
      }
    },
    "/provider-client/sample-lists": {
      "get": {
        "tags": [
          "Provider Client - Sample Lists"
        ],
        "summary": "Fetches all sample list table value",
        "description": "Fetches all sample list table value",
        "operationId": "getAll_12",
        "parameters": [
          {
            "name": "queryParams",
            "in": "query",
            "description": "The queryParams from client side.",
            "required": false,
            "schema": {
              "type": "object",
              "additionalProperties": true,
              "nullable": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "httpResponse",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Object"
                }
              }
            }
          }
        }
      }
    },
    "/provider-client/sample-lists/export": {
      "get": {
        "tags": [
          "Provider Client - Sample Lists"
        ],
        "summary": "Endpoint of Downloading data for samples to excel file.",
        "description": "Endpoint of Downloading data for samples to excel file.",
        "operationId": "exportToExcel_2",
        "parameters": [
          {
            "name": "queryParams",
            "in": "query",
            "description": "The queryParams.",
            "required": false,
            "schema": {
              "type": "object",
              "additionalProperties": true,
              "nullable": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "HttpResponse",
            "content": {
              "application/vnd.ms-excel": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          }
        }
      }
    },
    "/provider-client/sample-lists/filter-options": {
      "get": {
        "tags": [
          "Provider Client - Sample Lists"
        ],
        "summary": "Fetches sample list filter options.",
        "description": "Fetches sample list filter options.",
        "operationId": "fetchFilters",
        "parameters": [],
        "responses": {
          "200": {
            "description": "HttpResponse",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Object"
                }
              }
            }
          }
        }
      }
    },
    "/provider-client/test-requisition-revision": {
      "get": {
        "tags": [
          "Provider Client - Test Requisition Revision"
        ],
        "summary": "Fetch list of test requisition for table.",
        "description": "Fetch list of test requisition for table.",
        "operationId": "getAll_13",
        "parameters": [
          {
            "name": "queryParams",
            "in": "query",
            "description": "Holds queryParams from client side.",
            "required": true,
            "schema": {
              "type": "object",
              "additionalProperties": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "HttpResponse",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": true
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Provider Client - Test Requisition Revision"
        ],
        "summary": "Create Test Requisition Revision Entity",
        "description": "Create Test Requisition Revision Entity",
        "operationId": "createTrfByProvider",
        "parameters": [],
        "requestBody": {
          "description": "PatientDto",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PatientDto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "TestRequisitionPatientDto",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TestRequisitionRevisionDto"
                }
              }
            }
          }
        }
      }
    },
    "/provider-client/test-requisition-revision/export": {
      "get": {
        "tags": [
          "Provider Client - Test Requisition Revision"
        ],
        "summary": "Endpoint of Downloading data for sample-analysis to excel file.",
        "description": "Endpoint of Downloading data for sample-analysis to excel file.",
        "operationId": "exportToExcel_3",
        "parameters": [
          {
            "name": "queryParams",
            "in": "query",
            "description": "The queryParams.",
            "required": false,
            "schema": {
              "type": "object",
              "additionalProperties": true,
              "nullable": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "HttpResponse",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          }
        }
      }
    },
    "/provider-client/test-requisition-revision/{testRequisitionId}/{revisionNo}": {
      "get": {
        "tags": [
          "Provider Client - Test Requisition Revision"
        ],
        "summary": "Find Single Test Requisition.",
        "description": "Find Single Test Requisition.",
        "operationId": "getById",
        "parameters": [
          {
            "name": "testRequisitionId",
            "in": "path",
            "description": "testRequisitionId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "revisionNo",
            "in": "path",
            "description": "revisionNo",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "HttpResponse",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TestRequisitionRevisionDto"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Provider Client - Test Requisition Revision"
        ],
        "summary": "Delete Single Test Requisition.",
        "description": "Delete Single Test Requisition.",
        "operationId": "deleteById",
        "parameters": [
          {
            "name": "testRequisitionId",
            "in": "path",
            "description": "testRequisitionId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "revisionNo",
            "in": "path",
            "description": "revisionNo",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "httpResponse",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "string"
                  }
                }
              }
            }
          }
        }
      },
      "patch": {
        "tags": [
          "Provider Client - Test Requisition Revision"
        ],
        "summary": "Update test requisition revision step wise",
        "description": "Update test requisition revision step wise",
        "operationId": "saveStepwiseByProvider",
        "parameters": [
          {
            "name": "testRequisitionId",
            "in": "path",
            "description": "testRequisitionId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "revisionNo",
            "in": "path",
            "description": "revisionNo",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "step",
            "in": "query",
            "description": "step",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Step"
            }
          }
        ],
        "requestBody": {
          "description": "testRequisitionRevisionDto",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TestRequisitionRevisionDto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "httpResponse",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TestRequisitionRevisionDto"
                }
              }
            }
          }
        }
      }
    },
    "/provider-client/test-requisition-revision/{testRequisitionId}/{revisionNo}/revise": {
      "patch": {
        "tags": [
          "Provider Client - Test Requisition Revision"
        ],
        "summary": "Revise/Upate Test Requisition.",
        "description": "Revise/Upate Test Requisition.",
        "operationId": "reviseTestRequisition",
        "parameters": [
          {
            "name": "testRequisitionId",
            "in": "path",
            "description": "testRequisitionId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "revisionNo",
            "in": "path",
            "description": "revisionNo",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "description": "testRequisitionRevisionDto",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TestRequisitionRevisionDto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "httpResponse",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TestRequisitionRevisionDto"
                }
              }
            }
          }
        }
      }
    },
    "/provider/{providerId}/physicians": {
      "get": {
        "tags": [
          "Provider"
        ],
        "summary": "Fetch list of physicians by providerId.",
        "description": "Fetch list of physicians by providerId.",
        "operationId": "getPhysicians",
        "parameters": [
          {
            "name": "providerId",
            "in": "path",
            "description": "This holds provider Id send from client side.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of Physician",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Physician"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/qubit/upload/{batchId}": {
      "post": {
        "tags": [
          "Qubit"
        ],
        "summary": "Endpoint to upload qubit result",
        "description": "Endpoint to upload qubit result",
        "operationId": "saveQubitResult",
        "parameters": [
          {
            "name": "batchId",
            "in": "path",
            "description": "batchId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "file": {
                    "type": "string",
                    "description": "uploaded csv",
                    "format": "binary"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "http response code",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Object"
                }
              }
            }
          }
        }
      }
    },
    "/qubit/{batchId}": {
      "get": {
        "tags": [
          "Qubit"
        ],
        "summary": "Endpoint to Get all latest uploaded Qubit result .",
        "description": "Endpoint to Get all latest uploaded Qubit result .",
        "operationId": "getQubitResult",
        "parameters": [
          {
            "name": "batchId",
            "in": "path",
            "description": "batch Id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "http response code",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Object"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Qubit"
        ],
        "summary": "Endpoint to delete qubit csv file and unmapped.",
        "description": "Endpoint to delete qubit csv file and unmapped.",
        "operationId": "removeQubitResult",
        "parameters": [
          {
            "name": "batchId",
            "in": "path",
            "description": "batchId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "http response code",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Object"
                }
              }
            }
          }
        }
      }
    },
    "/rna-amplification": {
      "get": {
        "tags": [
          "Rna Amplification"
        ],
        "summary": "Endpoint to fetch all the rna amplifications.",
        "description": "Endpoint to fetch all the rna amplifications.",
        "operationId": "fetchAll_4",
        "parameters": [
          {
            "name": "queryParams",
            "in": "query",
            "description": "The queryParams.",
            "required": true,
            "schema": {
              "type": "object",
              "additionalProperties": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "HttpResponse",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": true
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Rna Amplification"
        ],
        "summary": "Generates the rna amplification sample list with dna id and batch id for given list of rna\n amplification batch id",
        "description": "Generates the rna amplification sample list with dna id and batch id for given list of rna\n amplification batch id",
        "operationId": "generateRNAAmplification",
        "parameters": [],
        "requestBody": {
          "description": "rnaAmplificationCreateDto",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RnaAmplificationCreateDto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "httpResponse",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": true
                }
              }
            }
          }
        }
      },
      "patch": {
        "tags": [
          "Rna Amplification"
        ],
        "summary": "Endpoint to update the rna amplification",
        "description": "Endpoint to update the rna amplification",
        "operationId": "update_2",
        "parameters": [],
        "requestBody": {
          "description": "The sample Analysis to update",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RnaAmplificationUpdateRequestBodyDto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "HttpResponse",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Object"
                }
              }
            }
          }
        }
      }
    },
    "/rna-amplification/batch-id": {
      "post": {
        "tags": [
          "Rna Amplification"
        ],
        "summary": "It takes a `RnaAmplificationBatchDto` object as input, validates it, and then returns a `RnaAmplificationBatchDto`\n object as output",
        "description": "It takes a `RnaAmplificationBatchDto` object as input, validates it, and then returns a `RnaAmplificationBatchDto`\n object as output",
        "operationId": "generateBatchId",
        "parameters": [],
        "requestBody": {
          "description": "This is the object that will be passed in the body of the request.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RnaAmplificationBatchDto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "A new batch ID is being returned.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RnaAmplificationBatchDto"
                }
              }
            }
          }
        }
      }
    },
    "/rna-amplification/create": {
      "post": {
        "tags": [
          "Rna Amplification"
        ],
        "summary": "The function `createRNAAmplification` is annotated with `and `annotations. The `annotation\n is used to specify the endpoint for the function. The `annotation is used to specify the table name,\n module name, message and id value for the audit trail",
        "description": "The function `createRNAAmplification` is annotated with `and `annotations. The `annotation\n is used to specify the endpoint for the function. The `annotation is used to specify the table name,\n module name, message and id value for the audit trail",
        "operationId": "createRNAAmplification",
        "parameters": [],
        "requestBody": {
          "description": "The payload is the object that is being passed to the API.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RnaAmplificationDto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "HttpResponse.ok(rnaAmplificationData)",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RnaAmplification"
                }
              }
            }
          }
        }
      }
    },
    "/rna-amplification/elution-sample-lists": {
      "get": {
        "tags": [
          "Rna Amplification"
        ],
        "summary": "Fetches possible sample list data of rna elution for adding new sample list",
        "description": "Fetches possible sample list data of rna elution for adding new sample list",
        "operationId": "fetchRnaElutions",
        "parameters": [],
        "responses": {
          "200": {
            "description": "HttpResponse",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Object"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/rna-amplification/export": {
      "get": {
        "tags": [
          "Rna Amplification"
        ],
        "summary": "Endpoint of Downloading data for rna-amplification to excel file.",
        "description": "Endpoint of Downloading data for rna-amplification to excel file.",
        "operationId": "exportToExcel_4",
        "parameters": [
          {
            "name": "queryParams",
            "in": "query",
            "description": "The queryParams.",
            "required": false,
            "schema": {
              "type": "object",
              "additionalProperties": true,
              "nullable": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "HttpResponse",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          }
        }
      }
    },
    "/rna-amplification/filter-attributes": {
      "get": {
        "tags": [
          "Rna Amplification"
        ],
        "summary": "Endpoint to fetch the filter attributes",
        "description": "Endpoint to fetch the filter attributes",
        "operationId": "getFilterAttribute_1",
        "parameters": [],
        "responses": {
          "200": {
            "description": "HttpResponse",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Object"
                }
              }
            }
          }
        }
      }
    },
    "/rna-amplification/materials": {
      "post": {
        "tags": [
          "Rna Amplification"
        ],
        "summary": "Endpoint to add the rna amplification material.",
        "description": "Endpoint to add the rna amplification material.",
        "operationId": "addMaterial",
        "parameters": [],
        "requestBody": {
          "description": "The rna amplification material to add",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RnaAmplificationMaterial"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "HttpResponse",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/RnaAmplificationMaterialDto"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/rna-amplification/protocols": {
      "get": {
        "tags": [
          "Rna Amplification"
        ],
        "summary": "It returns an HTTP response with a status code of 200 and a body containing the result of the `fetchProcotolInfo`\n function",
        "description": "It returns an HTTP response with a status code of 200 and a body containing the result of the `fetchProcotolInfo`\n function",
        "operationId": "fetchProtocolInfo",
        "parameters": [],
        "responses": {
          "200": {
            "description": "A map of protocol names to protocol info.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": true
                }
              }
            }
          }
        }
      }
    },
    "/rna-amplification/samples": {
      "post": {
        "tags": [
          "Rna Amplification"
        ],
        "summary": "Adds new samples to the given rna amplification batch id.",
        "description": "Adds new samples to the given rna amplification batch id.",
        "operationId": "addRnaAmplificationSampleList",
        "parameters": [],
        "requestBody": {
          "description": "The new sample registrations.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RnaAmplificationSampleListDto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "HttpResponse",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/RnaAmplificationSampleList"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/rna-amplification/{batchId}/export/samples": {
      "get": {
        "tags": [
          "Rna Amplification"
        ],
        "summary": "Endpoint for Downloading data for rna-amplification sample list to excel file.",
        "description": "Endpoint for Downloading data for rna-amplification sample list to excel file.",
        "operationId": "exportToExcel_5",
        "parameters": [
          {
            "name": "batchId",
            "in": "path",
            "description": "The rna amplification batch id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "queryParams",
            "in": "query",
            "description": "The queryParams from client send.",
            "required": false,
            "schema": {
              "type": "object",
              "additionalProperties": true,
              "nullable": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "HttpResponse",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          }
        }
      }
    },
    "/rna-amplification/{batchId}/materials": {
      "get": {
        "tags": [
          "Rna Amplification"
        ],
        "summary": "Endpoint to fetch the rna amplification material by rna amplification batch id.",
        "description": "Endpoint to fetch the rna amplification material by rna amplification batch id.",
        "operationId": "getMaterials",
        "parameters": [
          {
            "name": "batchId",
            "in": "path",
            "description": "The batchId for which materials to be fetched",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "HttpResponse",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/RnaAmplificationMaterialDto"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/rna-amplification/{batchId}/materials/{id}": {
      "delete": {
        "tags": [
          "Rna Amplification"
        ],
        "summary": "Endpoint to delete RNA Amplification material by ID.",
        "description": "Endpoint to delete RNA Amplification material by ID.",
        "operationId": "deleteMaterial",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The rna Amplification material id.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "batchId",
            "in": "path",
            "description": "batchId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "HttpResponse",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      },
      "patch": {
        "tags": [
          "Rna Amplification"
        ],
        "summary": "Endpoint to update rna amplification material by id.",
        "description": "Endpoint to update rna amplification material by id.",
        "operationId": "updateMaterial",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The rna amplification material id.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "batchId",
            "in": "path",
            "description": "batchId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "The rna amplification material data to be updated.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RnaAmplificationMaterial"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "HttpResponse",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RnaAmplificationMaterial"
                }
              }
            }
          }
        }
      }
    },
    "/rna-amplification/{batchId}/samples": {
      "get": {
        "tags": [
          "Rna Amplification"
        ],
        "summary": "`rnaAmplificationSampleList` is a function that returns a `HttpResponse` of type `List`\n and takes in a `String` and a `HashMap` as parameters",
        "description": "`rnaAmplificationSampleList` is a function that returns a `HttpResponse` of type `List`\n and takes in a `String` and a `HashMap` as parameters",
        "operationId": "rnaAmplificationSampleList",
        "parameters": [
          {
            "name": "batchId",
            "in": "path",
            "description": "The batchId of the batch you want to fetch the samples for.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "queryParams",
            "in": "query",
            "description": "This is a map of query parameters that will be passed to the service.",
            "required": false,
            "schema": {
              "type": "object",
              "additionalProperties": true,
              "nullable": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A list of RnaAmplificationSampleList objects",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/RnaAmplificationSampleList"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/rna-amplification/{id}": {
      "delete": {
        "tags": [
          "Rna Amplification"
        ],
        "summary": "",
        "description": "",
        "operationId": "delete_2",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "batchId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "httpResponse",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Object"
                }
              }
            }
          }
        }
      }
    },
    "/rna-amplification/{protocolId}/protocol-material": {
      "get": {
        "tags": [
          "Rna Amplification"
        ],
        "summary": "This function fetches the protocol materials for a given protocol id",
        "description": "This function fetches the protocol materials for a given protocol id",
        "operationId": "fetchProtoclMaterials",
        "parameters": [
          {
            "name": "protocolId",
            "in": "path",
            "description": "The id of the protocol to fetch",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A ProtocolMaterialDto object",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProtocolMaterialDto"
                }
              }
            }
          }
        }
      }
    },
    "/rna-amplification/{rnaAmplificationBatchId}": {
      "get": {
        "tags": [
          "Rna Amplification"
        ],
        "summary": "Fetches RNA Amplification by batch id.",
        "description": "Fetches RNA Amplification by batch id.",
        "operationId": "fetchRNAAmplification",
        "parameters": [
          {
            "name": "rnaAmplificationBatchId",
            "in": "path",
            "description": "The RNA amplification batch id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "HttpResponse",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": true
                }
              }
            }
          }
        }
      },
      "patch": {
        "tags": [
          "Rna Amplification"
        ],
        "summary": "Updates RNA Amplification by batch id.",
        "description": "Updates RNA Amplification by batch id.",
        "operationId": "updateRNAAmplification",
        "parameters": [
          {
            "name": "rnaAmplificationBatchId",
            "in": "path",
            "description": "The RNA Amplification batch id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "The RNA Amplification data to be saved.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RnaAmplificationDto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "HttpResponse",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": true
                }
              }
            }
          }
        }
      }
    },
    "/rna-elution": {
      "get": {
        "tags": [
          "Rna Elution"
        ],
        "summary": "Endpoint to fetch all the rna elution batch samples.",
        "description": "Endpoint to fetch all the rna elution batch samples.",
        "operationId": "fetchAll_5",
        "parameters": [
          {
            "name": "queryParams",
            "in": "query",
            "description": "The queryParams from client side",
            "required": true,
            "schema": {
              "type": "object",
              "additionalProperties": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "HttpResponse",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": true
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Rna Elution"
        ],
        "summary": "Generates a new RNA elution.",
        "description": "Generates a new RNA elution.",
        "operationId": "generateRNAEultion",
        "parameters": [],
        "requestBody": {
          "description": "rnaElutionCreateDto",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RnaElutionCreateDto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "HttpResponse",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": true
                }
              }
            }
          }
        }
      },
      "patch": {
        "tags": [
          "Rna Elution"
        ],
        "summary": "Endpoint to update the rna elution",
        "description": "Endpoint to update the rna elution",
        "operationId": "update_3",
        "parameters": [],
        "requestBody": {
          "description": "The sample Analysis to update",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RnaElutionUpdateRequestBodyDto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "HttpResponse",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Object"
                }
              }
            }
          }
        }
      }
    },
    "/rna-elution/create": {
      "post": {
        "tags": [
          "Rna Elution"
        ],
        "summary": "Saves RNA Elution",
        "description": "Saves RNA Elution",
        "operationId": "createRNAElution",
        "parameters": [],
        "requestBody": {
          "description": "The RNA Elution data to be saved.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RnaElutionDto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "HttpResponse",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RnaElution"
                }
              }
            }
          }
        }
      }
    },
    "/rna-elution/export": {
      "get": {
        "tags": [
          "Rna Elution"
        ],
        "summary": "Endpoint of Downloading data for rna-elution to excel file.",
        "description": "Endpoint of Downloading data for rna-elution to excel file.",
        "operationId": "exportToExcel_6",
        "parameters": [
          {
            "name": "queryParams",
            "in": "query",
            "description": "The queryParams.",
            "required": false,
            "schema": {
              "type": "object",
              "additionalProperties": true,
              "nullable": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "HttpResponse",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          }
        }
      }
    },
    "/rna-elution/filter-attributes": {
      "get": {
        "tags": [
          "Rna Elution"
        ],
        "summary": "Endpoint to fetch the filter attributes",
        "description": "Endpoint to fetch the filter attributes",
        "operationId": "getFilterAttribute_2",
        "parameters": [],
        "responses": {
          "200": {
            "description": "HttpResponse",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Object"
                }
              }
            }
          }
        }
      }
    },
    "/rna-elution/instruments": {
      "post": {
        "tags": [
          "Rna Elution"
        ],
        "summary": "Endpoint to create a new instrument for rna elution.",
        "description": "Endpoint to create a new instrument for rna elution.",
        "operationId": "addInstrument",
        "parameters": [],
        "requestBody": {
          "description": "The rna elution instrument to add.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RnaElutionInstrument"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "HttpResponse",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/RnaElutionInstrumentDto"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/rna-elution/materials": {
      "post": {
        "tags": [
          "Rna Elution"
        ],
        "summary": "Endpoint to add the rna elution material.",
        "description": "Endpoint to add the rna elution material.",
        "operationId": "addMaterial_1",
        "parameters": [],
        "requestBody": {
          "description": "The rna elution material to add",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RnaElutionMaterial"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "HttpResponse",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/RnaElutionMaterialDto"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/rna-elution/protocols": {
      "get": {
        "tags": [
          "Rna Elution"
        ],
        "summary": "Fetches all the protocols and lab technician.",
        "description": "Fetches all the protocols and lab technician.",
        "operationId": "fetchProtocolInfo_1",
        "parameters": [],
        "responses": {
          "200": {
            "description": "HttpResponse",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": true
                }
              }
            }
          }
        }
      }
    },
    "/rna-elution/sample-registrations": {
      "post": {
        "tags": [
          "Rna Elution"
        ],
        "summary": "Fetches unsaved sample registrations.",
        "description": "Fetches unsaved sample registrations.",
        "operationId": "fetchSampleRegistrations",
        "parameters": [],
        "requestBody": {
          "description": "The sample registrations ids.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RnaElutionSampleListDto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "HttpResponse",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Object"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/rna-elution/samples": {
      "post": {
        "tags": [
          "Rna Elution"
        ],
        "summary": "Adds new sample registrations to the given rna elution batch id.",
        "description": "Adds new sample registrations to the given rna elution batch id.",
        "operationId": "addRnaElutionSampleList",
        "parameters": [],
        "requestBody": {
          "description": "The new sample registrations.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RnaElutionSampleListDto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "HttpResponse",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/RnaElutionSampleList"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/rna-elution/{batchId}/export/samples": {
      "get": {
        "tags": [
          "Rna Elution"
        ],
        "summary": "Endpoint of Downloading data for rna-elution sample list to excel file.",
        "description": "Endpoint of Downloading data for rna-elution sample list to excel file.",
        "operationId": "exportToExcel_7",
        "parameters": [
          {
            "name": "batchId",
            "in": "path",
            "description": "The rna elution batch id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "queryParams",
            "in": "query",
            "description": "queryParams from client side.",
            "required": false,
            "schema": {
              "type": "object",
              "additionalProperties": true,
              "nullable": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "HttpResponse",
            "content": {
              "application/vnd.ms-excel": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          }
        }
      }
    },
    "/rna-elution/{batchId}/instruments": {
      "get": {
        "tags": [
          "Rna Elution"
        ],
        "summary": "Endpoint to fetch RNA Elution instruments by Id.",
        "description": "Endpoint to fetch RNA Elution instruments by Id.",
        "operationId": "getInstruments",
        "parameters": [
          {
            "name": "batchId",
            "in": "path",
            "description": "The rna elution batch id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "HttpResponse",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/RnaElutionInstrumentDto"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/rna-elution/{batchId}/instruments/{id}": {
      "delete": {
        "tags": [
          "Rna Elution"
        ],
        "summary": "Endpoint to delete rna elution instrument by id.",
        "description": "Endpoint to delete rna elution instrument by id.",
        "operationId": "deleteInstrument",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The rna elution instrument id.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "batchId",
            "in": "path",
            "description": "batchId.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "HttpResponse",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      },
      "patch": {
        "tags": [
          "Rna Elution"
        ],
        "summary": "Endpoint to update rna elution instrument.",
        "description": "Endpoint to update rna elution instrument.",
        "operationId": "updateInstrument",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The rna elution instrument id.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "batchId",
            "in": "path",
            "description": "batchId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "The rna elution instrument data to be updated.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RnaElutionInstrument"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "HttpResponse",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/RnaElutionInstrumentDto"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/rna-elution/{batchId}/materials": {
      "get": {
        "tags": [
          "Rna Elution"
        ],
        "summary": "Endpoint to fetch the rna elution material by rna elution batch id.",
        "description": "Endpoint to fetch the rna elution material by rna elution batch id.",
        "operationId": "getMaterials_1",
        "parameters": [
          {
            "name": "batchId",
            "in": "path",
            "description": "The batchId for which materials is to be fetched",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "HttpResponse",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/RnaElutionMaterialDto"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/rna-elution/{batchId}/materials/{id}": {
      "delete": {
        "tags": [
          "Rna Elution"
        ],
        "summary": "Endpoint to delete RNA Elution material by ID.",
        "description": "Endpoint to delete RNA Elution material by ID.",
        "operationId": "deleteMaterial_1",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The rna elution material id.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "batchId",
            "in": "path",
            "description": "The batchId for rna elution.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "HttpResponse",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      },
      "patch": {
        "tags": [
          "Rna Elution"
        ],
        "summary": "Endpoint to update rna elution material by id.",
        "description": "Endpoint to update rna elution material by id.",
        "operationId": "updateMaterial_1",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The rna elution material id.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "batchId",
            "in": "path",
            "description": "The batchId for rnaElution.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "The rna elution material data to be updated.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RnaElutionMaterial"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "HttpResponse",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RnaElutionMaterial"
                }
              }
            }
          }
        }
      }
    },
    "/rna-elution/{batchId}/samples": {
      "get": {
        "tags": [
          "Rna Elution"
        ],
        "summary": "Fetch RNA Elution Sample list by batch id.",
        "description": "Fetch RNA Elution Sample list by batch id.",
        "operationId": "rnaElutionSampleList",
        "parameters": [
          {
            "name": "batchId",
            "in": "path",
            "description": "The rna elution batch id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "queryParams",
            "in": "query",
            "description": "The query params to filter by.",
            "required": false,
            "schema": {
              "type": "object",
              "additionalProperties": true,
              "nullable": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "HttpResponse",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/RnaElutionSampleList"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/rna-elution/{id}": {
      "delete": {
        "tags": [
          "Rna Elution"
        ],
        "summary": "",
        "description": "",
        "operationId": "delete_3",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "batchId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "httpResponse",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Object"
                }
              }
            }
          }
        }
      }
    },
    "/rna-elution/{protocolId}/protocol-material": {
      "get": {
        "tags": [
          "Rna Elution"
        ],
        "summary": "Fetches protocol material for the following protocol.",
        "description": "Fetches protocol material for the following protocol.",
        "operationId": "fetchProtoclMaterials_1",
        "parameters": [
          {
            "name": "protocolId",
            "in": "path",
            "description": "The procotol id.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "HttpResponse",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProtocolMaterialDto"
                }
              }
            }
          }
        }
      }
    },
    "/rna-elution/{rnaEultionBatchId}": {
      "get": {
        "tags": [
          "Rna Elution"
        ],
        "summary": "Fetches RNA ELution by batch id.",
        "description": "Fetches RNA ELution by batch id.",
        "operationId": "fetchRNAElution",
        "parameters": [
          {
            "name": "rnaEultionBatchId",
            "in": "path",
            "description": "The RNA elution batch id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "HttpResponse",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": true
                }
              }
            }
          }
        }
      },
      "patch": {
        "tags": [
          "Rna Elution"
        ],
        "summary": "Updates RNA Elution by batch id.",
        "description": "Updates RNA Elution by batch id.",
        "operationId": "updateRNAElution",
        "parameters": [
          {
            "name": "rnaEultionBatchId",
            "in": "path",
            "description": "The RNA Elution batch id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "The RNA Elution data to be saved.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RnaElutionDto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "HttpResponse",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": true
                }
              }
            }
          }
        }
      }
    },
    "/sample-analysis": {
      "get": {
        "tags": [
          "Sample Analysis"
        ],
        "summary": "Endpoint to fetch all the sample analysis.",
        "description": "Endpoint to fetch all the sample analysis.",
        "operationId": "fetchAll_6",
        "parameters": [
          {
            "name": "queryParams",
            "in": "query",
            "description": "it holds queryParams object from client.",
            "required": true,
            "schema": {
              "type": "object",
              "additionalProperties": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "HttpResponse",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": true
                }
              }
            }
          }
        }
      },
      "patch": {
        "tags": [
          "Sample Analysis"
        ],
        "summary": "Endpoint to update the sample analysis",
        "description": "Endpoint to update the sample analysis",
        "operationId": "update_4",
        "parameters": [],
        "requestBody": {
          "description": "The sample Analysis to update",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SampleAnalysisDto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "HttpResponse",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SampleAnalysis"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/sample-analysis/export": {
      "get": {
        "tags": [
          "Sample Analysis"
        ],
        "summary": "Endpoint of Downloading data for sample-analysis to excel file.",
        "description": "Endpoint of Downloading data for sample-analysis to excel file.",
        "operationId": "exportToExcel_8",
        "parameters": [
          {
            "name": "queryParams",
            "in": "query",
            "description": "The queryParams.",
            "required": false,
            "schema": {
              "type": "object",
              "additionalProperties": true,
              "nullable": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "HttpResponse",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          }
        }
      }
    },
    "/sample-analysis/filter-attributes": {
      "get": {
        "tags": [
          "Sample Analysis"
        ],
        "summary": "Endpoint to fetch the filter attributes",
        "description": "Endpoint to fetch the filter attributes",
        "operationId": "getFilterAttribute_3",
        "parameters": [],
        "responses": {
          "200": {
            "description": "HttpResponse",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Object"
                }
              }
            }
          }
        }
      }
    },
    "/sample-analysis/{sequencingSampleId}": {
      "get": {
        "tags": [
          "Sample Analysis"
        ],
        "summary": "Endpoint to fetch the sample analysis by sequencingSampleId",
        "description": "Endpoint to fetch the sample analysis by sequencingSampleId",
        "operationId": "get_2",
        "parameters": [
          {
            "name": "sequencingSampleId",
            "in": "path",
            "description": "The sequencingSampleId for which sample analysis is to be fetched",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "HttpResponse",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SampleAnalysis"
                }
              }
            }
          }
        }
      }
    },
    "/sample-registration": {
      "get": {
        "tags": [
          "Sample Registration"
        ],
        "summary": "Endpoint to fetch all the sample registrations.",
        "description": "Endpoint to fetch all the sample registrations.",
        "operationId": "fetchAll_7",
        "parameters": [
          {
            "name": "queryParams",
            "in": "query",
            "description": "queryParams from client side.",
            "required": true,
            "schema": {
              "type": "object",
              "additionalProperties": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "HttpResponse",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": true
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Sample Registration"
        ],
        "summary": "Endpoint to add a sample registration.",
        "description": "Endpoint to add a sample registration.",
        "operationId": "add",
        "parameters": [],
        "requestBody": {
          "description": "SampleRegistration",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SampleRegistration"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "HttpResponse",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SampleRegistration"
                }
              }
            }
          }
        }
      }
    },
    "/sample-registration/client-ids": {
      "get": {
        "tags": [
          "Sample Registration"
        ],
        "summary": "Endpoint to fetch list of Client Id or Site Id for dropdown",
        "description": "Endpoint to fetch list of Client Id or Site Id for dropdown",
        "operationId": "fetchAllClientIds",
        "parameters": [],
        "responses": {
          "200": {
            "description": "HttpResponse",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Object"
                }
              }
            }
          }
        }
      }
    },
    "/sample-registration/export": {
      "get": {
        "tags": [
          "Sample Registration"
        ],
        "summary": "Endpoint of Downloading data for sample registrations to excel file.",
        "description": "Endpoint of Downloading data for sample registrations to excel file.",
        "operationId": "exportToExcel_9",
        "parameters": [
          {
            "name": "queryParams",
            "in": "query",
            "description": "The queryParams.",
            "required": false,
            "schema": {
              "type": "object",
              "additionalProperties": true,
              "nullable": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "HttpResponse",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          }
        }
      }
    },
    "/sample-registration/project-ids": {
      "get": {
        "tags": [
          "Sample Registration"
        ],
        "summary": "It returns an HTTP response with a status code of 200 and a body containing the list of project IDs",
        "description": "It returns an HTTP response with a status code of 200 and a body containing the list of project IDs",
        "operationId": "fetchAllProjectIds",
        "parameters": [],
        "responses": {
          "200": {
            "description": "HttpResponse.ok(sampleRegistrationService.getProjectIds());",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Object"
                }
              }
            }
          }
        }
      }
    },
    "/sample-registration/status": {
      "patch": {
        "tags": [
          "Sample Registration"
        ],
        "summary": "Endpoint to update the sample registrations",
        "description": "Endpoint to update the sample registrations",
        "operationId": "updateAllStatus",
        "parameters": [],
        "requestBody": {
          "description": "The sample registrations to update",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/StatusUpdateAllDto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "HttpResponse",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SampleRegistration"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/sample-registration/test-requisitions": {
      "get": {
        "tags": [
          "Sample Registration"
        ],
        "summary": "Endpoint to fetch a sample registration by ID.",
        "description": "Endpoint to fetch a sample registration by ID.",
        "operationId": "fetchAllTestRequisition",
        "parameters": [],
        "responses": {
          "200": {
            "description": "HttpResponse",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TestRequisitionSampleDto"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/sample-registration/time-points": {
      "get": {
        "tags": [
          "Sample Registration"
        ],
        "summary": "It returns an HTTP response with a status code of 200 and a body containing the result of the\n `sampleRegistrationService.getTimePoints()` function",
        "description": "It returns an HTTP response with a status code of 200 and a body containing the result of the\n `sampleRegistrationService.getTimePoints()` function",
        "operationId": "fetchAllTimePoints",
        "parameters": [],
        "responses": {
          "200": {
            "description": "A list of time points",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Object"
                }
              }
            }
          }
        }
      }
    },
    "/sample-registration/{id}": {
      "get": {
        "tags": [
          "Sample Registration"
        ],
        "summary": "Endpoint to fetch a sample registration by ID.",
        "description": "Endpoint to fetch a sample registration by ID.",
        "operationId": "fetchById_3",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Holds id send from client side.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "HttpResponse",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SampleRegistration"
                }
              }
            }
          }
        }
      },
      "patch": {
        "tags": [
          "Sample Registration"
        ],
        "summary": "Endpoint to update a sample registration by ID.",
        "description": "Endpoint to update a sample registration by ID.",
        "operationId": "update_5",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Holds id send from client side.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "description": "Holds sampleRegistration from client side.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SampleRegistration"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "HttpResponse",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SampleRegistration"
                }
              }
            }
          }
        }
      }
    },
    "/sample-registration/{id}/status": {
      "patch": {
        "tags": [
          "Sample Registration"
        ],
        "summary": "Endpoint to update the sample registration status by ID.",
        "description": "Endpoint to update the sample registration status by ID.",
        "operationId": "updateStatus",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "description": "Holds StatusUpdateDto Object.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/StatusUpdateDto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "HttpResponse",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SampleRegistration"
                }
              }
            }
          }
        }
      }
    },
    "/submit-to-ngs-sample-analysis": {
      "get": {
        "tags": [
          "Submit to NGS Sample Analysis"
        ],
        "summary": "The function is a GET request that takes in a query parameter and returns a list of all the sample analysis",
        "description": "The function is a GET request that takes in a query parameter and returns a list of all the sample analysis",
        "operationId": "fetchAll_8",
        "parameters": [
          {
            "name": "queryParams",
            "in": "query",
            "description": "This is the query parameter that will be passed to the service.",
            "required": true,
            "schema": {
              "type": "object",
              "additionalProperties": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A list of all the sample analysis in the database.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Object"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Submit to NGS Sample Analysis"
        ],
        "summary": "It takes a JSON object as input, and returns a JSON object as output",
        "description": "It takes a JSON object as input, and returns a JSON object as output",
        "operationId": "submitSampleAnalysis",
        "parameters": [],
        "requestBody": {
          "description": "This is the object that will be passed to the service.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SubmitToNgsSampleDto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "HttpResponse.created(submitToNgsSampleAnalysisService.submitSampleAnalysis ( submitToSampleAnalysisDto));",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Object"
                }
              }
            }
          }
        }
      }
    },
    "/submit-to-ngs-sample-analysis/export": {
      "get": {
        "tags": [
          "Submit to NGS Sample Analysis"
        ],
        "summary": "The function takes a queryParams hashmap as input, and returns a SystemFile object",
        "description": "The function takes a queryParams hashmap as input, and returns a SystemFile object",
        "operationId": "exportToExcel_10",
        "parameters": [
          {
            "name": "queryParams",
            "in": "query",
            "description": "The query parameters that will be passed to the service.",
            "required": false,
            "schema": {
              "type": "object",
              "additionalProperties": true,
              "nullable": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A SystemFile object.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          }
        }
      }
    },
    "/submit-to-ngs-sample-analysis/filter-attributes": {
      "get": {
        "tags": [
          "Submit to NGS Sample Analysis"
        ],
        "summary": "It returns a list of filter options for the NGS Sample Analysis page",
        "description": "It returns a list of filter options for the NGS Sample Analysis page",
        "operationId": "fetchFilters_1",
        "parameters": [],
        "responses": {
          "200": {
            "description": "A list of filter options",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Object"
                }
              }
            }
          }
        }
      }
    },
    "/submit-to-ngs-sample-analysis/project-ids": {
      "get": {
        "tags": [
          "Submit to NGS Sample Analysis"
        ],
        "operationId": "getProjectIds",
        "parameters": [],
        "responses": {
          "200": {
            "description": "getProjectIds 200 response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Object"
                }
              }
            }
          }
        }
      }
    },
    "/submit-to-ngs-sample-analysis/status": {
      "patch": {
        "tags": [
          "Submit to NGS Sample Analysis"
        ],
        "summary": "It takes a JSON object as input, and returns a JSON object as output",
        "description": "It takes a JSON object as input, and returns a JSON object as output",
        "operationId": "updateStatus_1",
        "parameters": [],
        "requestBody": {
          "description": "This is the object that will be passed to the service.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SubmitToNgsSampleAnalysisUpdateDto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "HttpResponse.ok(submitToNgsSampleAnalysisService.updateRequest(submitToNgsSampleAnalysisDto));",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Object"
                }
              }
            }
          }
        }
      }
    },
    "/test-requisition-revision": {
      "get": {
        "tags": [
          "Test Requision Revision"
        ],
        "summary": "Fetch list of test requisition for table.",
        "description": "Fetch list of test requisition for table.",
        "operationId": "getAll_14",
        "parameters": [
          {
            "name": "queryParams",
            "in": "query",
            "required": true,
            "schema": {
              "type": "object",
              "additionalProperties": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "httpResponse",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": true
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Test Requision Revision"
        ],
        "summary": "Create Test Requisition Revision Entity",
        "description": "Create Test Requisition Revision Entity",
        "operationId": "savePatientStep",
        "parameters": [],
        "requestBody": {
          "description": "PatientDto",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PatientDto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "TestRequisitionPatientDto",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TestRequisitionRevisionDto"
                }
              }
            }
          }
        }
      }
    },
    "/test-requisition-revision/cancel/{testRequisitionId}/{revisionNumber}": {
      "post": {
        "tags": [
          "Test Requision Revision"
        ],
        "summary": "Endpoint to cancel TRF Order by TRF Id and Revision Number",
        "description": "Endpoint to cancel TRF Order by TRF Id and Revision Number",
        "operationId": "cancelTestRequisition",
        "parameters": [
          {
            "name": "testRequisitionId",
            "in": "path",
            "description": "TRF Id for which the order is need to be cancelled",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "revisionNumber",
            "in": "path",
            "description": "Revision number of the TRF for which the TRF is cancelled",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "HttpResponse",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Object"
                }
              }
            }
          }
        }
      }
    },
    "/test-requisition-revision/export": {
      "get": {
        "tags": [
          "Test Requision Revision"
        ],
        "summary": "Endpoint of Downloading data for sample-analysis to excel file.",
        "description": "Endpoint of Downloading data for sample-analysis to excel file.",
        "operationId": "exportToExcel_11",
        "parameters": [
          {
            "name": "queryParams",
            "in": "query",
            "description": "The queryParams.",
            "required": false,
            "schema": {
              "type": "object",
              "additionalProperties": true,
              "nullable": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "HttpResponse",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          }
        }
      }
    },
    "/test-requisition-revision/pbm": {
      "get": {
        "tags": [
          "Test Requision Revision"
        ],
        "summary": "This function is a GET request that returns a list of PBM's",
        "description": "This function is a GET request that returns a list of PBM's",
        "operationId": "getPBMList",
        "parameters": [],
        "responses": {
          "200": {
            "description": "A list of PBM's",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Object"
                }
              }
            }
          }
        }
      }
    },
    "/test-requisition-revision/{testRequisitionId}/{revisionNo}": {
      "get": {
        "tags": [
          "Test Requision Revision"
        ],
        "summary": "Find Single Test Requisition.",
        "description": "Find Single Test Requisition.",
        "operationId": "getById_1",
        "parameters": [
          {
            "name": "testRequisitionId",
            "in": "path",
            "description": "testRequisitionId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "revisionNo",
            "in": "path",
            "description": "revisionNo",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "httpResponse",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TestRequisitionRevisionDto"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Test Requision Revision"
        ],
        "summary": "Delete Single Test Requisition.",
        "description": "Delete Single Test Requisition.",
        "operationId": "deleteById_1",
        "parameters": [
          {
            "name": "testRequisitionId",
            "in": "path",
            "description": "testRequisitionId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "revisionNo",
            "in": "path",
            "description": "revisionNo",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "httpResponse",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "string"
                  }
                }
              }
            }
          }
        }
      },
      "patch": {
        "tags": [
          "Test Requision Revision"
        ],
        "summary": "Update test requisition revision step wise",
        "description": "Update test requisition revision step wise",
        "operationId": "saveStepwise",
        "parameters": [
          {
            "name": "testRequisitionId",
            "in": "path",
            "description": "testRequisitionId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "revisionNo",
            "in": "path",
            "description": "revisionNo",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "step",
            "in": "query",
            "description": "step",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Step"
            }
          }
        ],
        "requestBody": {
          "description": "testRequisitionRevisionDto",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TestRequisitionRevisionDto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "httpResponse with updated testRequisitionRevision",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TestRequisitionRevisionDto"
                }
              }
            }
          }
        }
      }
    },
    "/test-requisition-revision/{testRequisitionId}/{revisionNo}/revise": {
      "patch": {
        "tags": [
          "Test Requision Revision"
        ],
        "summary": "Revise/Upate Test Requisition.",
        "description": "Revise/Upate Test Requisition.",
        "operationId": "reviseTestRequisition_1",
        "parameters": [
          {
            "name": "testRequisitionId",
            "in": "path",
            "description": "testRequisitionId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "revisionNo",
            "in": "path",
            "description": "revisionNo",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "description": "testRequisitionRevisionDto",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TestRequisitionRevisionDto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "httpResponse with revise/update test requisition",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TestRequisitionRevisionDto"
                }
              }
            }
          }
        }
      }
    },
    "/testing-npi/secret-value": {
      "get": {
        "operationId": "get_3",
        "parameters": [],
        "responses": {
          "200": {
            "description": "get_3 200 response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/testing-npi/work-path": {
      "post": {
        "operationId": "postWorkPathRequest",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TestDto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "postWorkPathRequest 200 response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/testing-npi/{npi}": {
      "get": {
        "operationId": "inside",
        "parameters": [
          {
            "name": "npi",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "inside 200 response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/third-party-health/webhook": {
      "post": {
        "tags": [
          "Third Party Health"
        ],
        "summary": "The function validates the webhook request by checking if the signature is valid and the payload is not empty",
        "description": "The function validates the webhook request by checking if the signature is valid and the payload is not empty",
        "operationId": "workPathWebhookVerification",
        "parameters": [
          {
            "name": "WP-Signature",
            "in": "header",
            "description": "The signature of the request.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "The payload of the webhook request.",
          "content": {
            "application/json": {
              "schema": {
                "type": "string"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "A boolean value",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Object"
                }
              }
            }
          }
        }
      }
    },
    "/workpath/webhook": {
      "post": {
        "tags": [
          "Workpath"
        ],
        "summary": "It receives data from the webhook and returns a response.",
        "description": "It receives data from the webhook and returns a response.",
        "operationId": "receiveData",
        "parameters": [
          {
            "name": "WP-Signature",
            "in": "header",
            "description": "The signature of the request.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "The payload of the webhook.",
          "content": {
            "application/json": {
              "schema": {
                "type": "string"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "HttpResponse.ok(webhookService.handleOnWebhookResponse(wpSignature, payload));",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebhookResponse"
                }
              }
            }
          }
        }
      }
    },
    "/xifin-billing-request": {
      "post": {
        "tags": [
          "Xifin Billing Request"
        ],
        "summary": "This function takes a billing request, converts it to a Xifin request, sends it to Xifin, and then fetches the\n response from Xifin",
        "description": "This function takes a billing request, converts it to a Xifin request, sends it to Xifin, and then fetches the\n response from Xifin",
        "operationId": "createXifinRequest",
        "parameters": [],
        "requestBody": {
          "description": "This is the request body that is sent to the endpoint.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BillingRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "HttpResponse.ok(response)",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/xifin-billing-request/accessionId/{accesssionId}": {
      "post": {
        "tags": [
          "Xifin Billing Request"
        ],
        "summary": "This function takes a BillingDocument object and an accessionId as input and uploads the files to the SFTP server",
        "description": "This function takes a BillingDocument object and an accessionId as input and uploads the files to the SFTP server",
        "operationId": "uploadDocuments",
        "parameters": [
          {
            "name": "accesssionId",
            "in": "path",
            "description": "This is the unique identifier for the order.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "The document object that contains the file to be uploaded.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BillingDocument"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "HttpResponse.ok(\"Files uploaded successfully\");",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "Address": {
        "required": [
          "zipcode"
        ],
        "type": "object",
        "properties": {
          "state": {
            "maxLength": 2,
            "minLength": 2,
            "type": "string"
          },
          "zipcode": {
            "minLength": 1,
            "pattern": "^[0-9]{5}(?:-[0-9]{4})?$",
            "type": "string"
          },
          "city": {
            "type": "string"
          },
          "addressLine1": {
            "type": "string"
          },
          "addressLine2": {
            "type": "string"
          }
        }
      },
      "Appointment": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "intake_id": {
            "type": "integer",
            "format": "int64"
          },
          "location": {
            "$ref": "#/components/schemas/Location"
          },
          "type": {
            "type": "string"
          },
          "payment_status": {
            "type": "string"
          },
          "notes": {
            "type": "string"
          },
          "status": {
            "type": "string"
          },
          "actual_arrival": {
            "$ref": "#/components/schemas/Timestamp"
          },
          "status_transitions": {
            "$ref": "#/components/schemas/StatusTransitions"
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Appointment.Data"
            }
          }
        }
      },
      "Appointment.Data": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "label": {
            "type": "string"
          },
          "step_id": {
            "type": "integer",
            "format": "int64"
          },
          "type": {
            "type": "string"
          },
          "value": {
            "type": "string"
          }
        }
      },
      "AuditEntity": {
        "type": "object",
        "properties": {
          "createdBy": {
            "type": "string",
            "description": "Fetches the user who created"
          },
          "updatedBy": {
            "type": "string",
            "description": "Fetches the user who updated"
          },
          "createdAt": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Timestamp"
              },
              {
                "description": "Fetches the time of creation"
              }
            ]
          },
          "updatedAt": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Timestamp"
              },
              {
                "description": "Fetches the time of update"
              }
            ]
          }
        }
      },
      "BillingDocument": {
        "allOf": [
          {
            "$ref": "#/components/schemas/AuditEntity"
          },
          {
            "type": "object",
            "properties": {
              "id": {
                "type": "integer",
                "format": "int64",
                "nullable": true
              },
              "moduleId": {
                "type": "string"
              },
              "moduleName": {
                "type": "string"
              },
              "documentType": {
                "$ref": "#/components/schemas/DocumentType"
              },
              "fileName": {
                "type": "string"
              },
              "fileUrl": {
                "type": "string"
              },
              "sourceModuleId": {
                "type": "string"
              },
              "sourceModuleName": {
                "type": "string"
              },
              "documentTypeIdx": {
                "type": "integer",
                "format": "int32"
              }
            }
          }
        ]
      },
      "BillingRequest": {
        "allOf": [
          {
            "$ref": "#/components/schemas/AuditEntity"
          },
          {
            "required": [
              "patientCity",
              "patientFirstName",
              "patientLastName",
              "patientState",
              "patientStreet",
              "patientZipCode",
              "physicianAccountId",
              "physicianName",
              "physicianNpi",
              "practiceName",
              "providerClientId",
              "providerId",
              "testId",
              "testRequisitionId"
            ],
            "type": "object",
            "properties": {
              "accessionId": {
                "type": "string",
                "nullable": true
              },
              "insuranceInfoCity": {
                "type": "string"
              },
              "insuranceInfoRegion": {
                "type": "string"
              },
              "insuranceInfoState": {
                "type": "string"
              },
              "insuranceInfoZip": {
                "type": "string"
              },
              "primaryInsuranceSubscriberDateOfBirth": {
                "$ref": "#/components/schemas/Timestamp"
              },
              "secondaryInsuranceSubscriberDateOfBirth": {
                "$ref": "#/components/schemas/Timestamp"
              },
              "primaryInsuranceGroupNo": {
                "type": "string"
              },
              "secondaryInsuranceGroupNo": {
                "type": "string"
              },
              "primaryInsuredRelationship": {
                "type": "string"
              },
              "primaryInsuranceSubscriberFirstName": {
                "type": "string"
              },
              "primaryInsuranceSubscriberMiddleName": {
                "type": "string"
              },
              "primaryInsuranceSubscriberLastName": {
                "type": "string"
              },
              "secondaryInsuredRelationship": {
                "type": "string"
              },
              "secondaryInsuranceSubscriberFirstName": {
                "type": "string"
              },
              "secondaryInsuranceSubscriberMiddleName": {
                "type": "string"
              },
              "secondaryInsuranceSubscriberLastName": {
                "type": "string"
              },
              "primaryInsuranceSubscriberId": {
                "type": "string"
              },
              "secondaryInsuranceSubscriberId": {
                "type": "string"
              },
              "patientReportReportingDate": {
                "$ref": "#/components/schemas/Timestamp"
              },
              "physicianName": {
                "minLength": 1,
                "type": "string"
              },
              "physicianNpi": {
                "type": "integer",
                "format": "int64"
              },
              "patientId": {
                "type": "string"
              },
              "patientCity": {
                "minLength": 1,
                "type": "string"
              },
              "patientState": {
                "minLength": 1,
                "type": "string"
              },
              "patientZipCode": {
                "type": "string"
              },
              "patientDateOfBirth": {
                "$ref": "#/components/schemas/Timestamp"
              },
              "patientEmail": {
                "type": "string"
              },
              "patientGender": {
                "$ref": "#/components/schemas/Gender"
              },
              "patientPhoneNumber": {
                "type": "string"
              },
              "patientFirstName": {
                "minLength": 1,
                "type": "string"
              },
              "patientLastName": {
                "minLength": 1,
                "type": "string"
              },
              "patientMiddleName": {
                "type": "string"
              },
              "testRequisitionId": {
                "type": "string"
              },
              "assignedTo": {
                "type": "string"
              },
              "status": {
                "$ref": "#/components/schemas/BillingRequestStatusEnum"
              },
              "remarks": {
                "type": "string"
              },
              "dateSubmitted": {
                "$ref": "#/components/schemas/Timestamp"
              },
              "patientStreet": {
                "minLength": 1,
                "type": "string"
              },
              "primaryInsuranceCompany": {
                "type": "string"
              },
              "secondaryInsuranceCompany": {
                "type": "string"
              },
              "billingDocuments": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/BillingDocument"
                }
              },
              "ssn": {
                "type": "string"
              },
              "patientWeight": {
                "type": "number",
                "format": "double"
              },
              "patientHeight": {
                "type": "number",
                "format": "double"
              },
              "primaryPaymentMethod": {
                "$ref": "#/components/schemas/PaymentMethod"
              },
              "practiceName": {
                "minLength": 1,
                "type": "string"
              },
              "patientDateSampleCollected": {
                "$ref": "#/components/schemas/Timestamp"
              },
              "physicianAccountId": {
                "type": "string"
              },
              "patientEthnicity": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "xifinResponse": {
                "type": "string"
              },
              "xifinAccession": {
                "type": "string"
              },
              "placeOfService": {
                "type": "string"
              },
              "diagnosisCode": {
                "type": "string"
              },
              "primaryXifinPayerId": {
                "type": "string"
              },
              "secondaryXifinPayerId": {
                "type": "string"
              },
              "providerId": {
                "type": "integer",
                "format": "int64"
              },
              "isUpdated": {
                "type": "boolean"
              },
              "primaryInsuranceSubscriberGender": {
                "$ref": "#/components/schemas/Gender"
              },
              "secondaryInsuranceSubscriberGender": {
                "$ref": "#/components/schemas/Gender"
              },
              "tubeLabel": {
                "type": "string"
              },
              "bodyLocationName": {
                "type": "string"
              },
              "barcode": {
                "type": "string"
              },
              "sampleCollectionDate": {
                "$ref": "#/components/schemas/Timestamp"
              },
              "psoriasisType": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "psoriasisTypeOther": {
                "type": "string"
              },
              "confirmationDate": {
                "$ref": "#/components/schemas/Timestamp"
              },
              "confirmationClinicianName": {
                "type": "string"
              },
              "psoriasisTypes": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/PsoriasisType"
                }
              },
              "mrn": {
                "type": "string"
              },
              "psoriasisTypeOtherDiseaseName": {
                "type": "string"
              },
              "primaryInsuranceStreet": {
                "type": "string"
              },
              "primaryInsuranceCity": {
                "type": "string"
              },
              "primaryInsuranceState": {
                "type": "string"
              },
              "primaryInsuranceZipcode": {
                "type": "string"
              },
              "primaryGuarantorFirstName": {
                "type": "string"
              },
              "primaryGuarantorMiddleName": {
                "type": "string"
              },
              "primaryGuarantorLastName": {
                "type": "string"
              },
              "primaryGuarantorDob": {
                "$ref": "#/components/schemas/Timestamp"
              },
              "primaryGuarantorGender": {
                "$ref": "#/components/schemas/Gender"
              },
              "primaryGuarantorStreet": {
                "type": "string"
              },
              "primaryGuarantorCity": {
                "type": "string"
              },
              "primaryGuarantorState": {
                "type": "string"
              },
              "primaryGuarantorZipcode": {
                "type": "string"
              },
              "primaryGuarantorEmail": {
                "type": "string"
              },
              "primaryGuarantorPhone": {
                "type": "string"
              },
              "secondaryInsuranceStreet": {
                "type": "string"
              },
              "secondaryInsuranceCity": {
                "type": "string"
              },
              "secondaryInsuranceState": {
                "type": "string"
              },
              "secondaryInsuranceZipcode": {
                "type": "string"
              },
              "secondaryGuarantorFirstName": {
                "type": "string"
              },
              "secondaryGuarantorMiddleName": {
                "type": "string"
              },
              "secondaryGuarantorLastName": {
                "type": "string"
              },
              "secondaryGuarantorDob": {
                "$ref": "#/components/schemas/Timestamp"
              },
              "secondaryGuarantorGender": {
                "$ref": "#/components/schemas/Gender"
              },
              "secondaryGuarantorStreet": {
                "type": "string"
              },
              "secondaryGuarantorCity": {
                "type": "string"
              },
              "secondaryGuarantorState": {
                "type": "string"
              },
              "secondaryGuarantorZipcode": {
                "type": "string"
              },
              "secondaryGuarantorEmail": {
                "type": "string"
              },
              "secondaryGuarantorPhone": {
                "type": "string"
              },
              "updated": {
                "type": "boolean"
              },
              "secondaryPaymentMethod": {
                "$ref": "#/components/schemas/PaymentMethod"
              },
              "primaryGuarantorInsuredRelationship": {
                "type": "string"
              },
              "secondaryGuarantorInsuredRelationship": {
                "type": "string"
              },
              "provider": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/Provider"
                  },
                  {
                    "nullable": true
                  }
                ]
              },
              "providerClientId": {
                "minLength": 1,
                "type": "string"
              },
              "testId": {
                "minLength": 1,
                "type": "string"
              },
              "psoriasisTypeLabel": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "directClientBillSecondaryPharmacyBenefitManagement": {
                "type": "string"
              },
              "directClientBillSecondaryInsuranceId": {
                "type": "integer",
                "format": "int64"
              },
              "directClientBillSecondaryInsuranceCompany": {
                "type": "string"
              },
              "directClientBillSecondaryInsuredRelationship": {
                "type": "string"
              },
              "directClientBillSecondaryInsuranceSubscriberFirstName": {
                "type": "string"
              },
              "directClientBillSecondaryInsuranceSubscriberMiddleName": {
                "type": "string"
              },
              "directClientBillSecondaryInsuranceSubscriberLastName": {
                "type": "string"
              },
              "directClientBillSecondaryInsuranceSubscriberDateOfBirth": {
                "$ref": "#/components/schemas/Timestamp"
              },
              "directClientBillSecondaryInsuranceSubscriberGender": {
                "$ref": "#/components/schemas/Gender"
              },
              "directClientBillSecondaryInsuranceSubscriberId": {
                "type": "string"
              },
              "directClientBillSecondaryInsuranceGroupNo": {
                "type": "string"
              },
              "directClientBillSecondaryInsuranceStreet": {
                "type": "string"
              },
              "directClientBillSecondaryInsuranceCity": {
                "type": "string"
              },
              "directClientBillSecondaryInsuranceState": {
                "type": "string"
              },
              "directClientBillSecondaryInsuranceZipcode": {
                "type": "string"
              },
              "directClientBillPrimaryPharmacyBenefitManagement": {
                "type": "string"
              },
              "directClientBillPrimaryInsuranceId": {
                "type": "integer",
                "format": "int64"
              },
              "directClientBillPrimaryInsuranceCompany": {
                "type": "string"
              },
              "directClientBillPrimaryInsuredRelationship": {
                "type": "string"
              },
              "directClientBillPrimaryInsuranceSubscriberFirstName": {
                "type": "string"
              },
              "directClientBillPrimaryInsuranceSubscriberMiddleName": {
                "type": "string"
              },
              "directClientBillPrimaryInsuranceSubscriberLastName": {
                "type": "string"
              },
              "directClientBillPrimaryInsuranceSubscriberDateOfBirth": {
                "$ref": "#/components/schemas/Timestamp"
              },
              "directClientBillPrimaryInsuranceSubscriberGender": {
                "$ref": "#/components/schemas/Gender"
              },
              "directClientBillPrimaryInsuranceSubscriberId": {
                "type": "string"
              },
              "directClientBillPrimaryInsuranceGroupNo": {
                "type": "string"
              },
              "directClientBillPrimaryInsuranceStreet": {
                "type": "string"
              },
              "directClientBillPrimaryInsuranceCity": {
                "type": "string"
              },
              "directClientBillPrimaryInsuranceState": {
                "type": "string"
              },
              "directClientBillPrimaryInsuranceZipcode": {
                "type": "string"
              },
              "directClientBillSecondaryRxbin": {
                "type": "string"
              },
              "directClientBillSecondaryRxpcn": {
                "type": "string"
              },
              "directClientBillPrimaryRxbin": {
                "type": "string"
              },
              "directClientBillPrimaryRxpcn": {
                "type": "string"
              }
            }
          }
        ]
      },
      "BillingRequestStatusEnum": {
        "type": "string",
        "enum": [
          "BILLING_SUBMITTED",
          "PENDING",
          "SUBMISSION_FAILED"
        ]
      },
      "ChangeCognitoAuthenticationRequest": {
        "allOf": [
          {
            "$ref": "#/components/schemas/UsernamePasswordCredentials"
          },
          {
            "required": [
              "new_password"
            ],
            "type": "object",
            "properties": {
              "new_password": {
                "minLength": 1,
                "type": "string"
              }
            }
          }
        ]
      },
      "CognitoAuthenticationRequest": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/UsernamePasswordCredentials"
          }
        ]
      },
      "Disease": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string"
          },
          "diseaseName": {
            "type": "string"
          },
          "type": {
            "type": "string"
          }
        }
      },
      "Document": {
        "allOf": [
          {
            "$ref": "#/components/schemas/AuditEntity"
          },
          {
            "type": "object",
            "properties": {
              "id": {
                "type": "integer",
                "format": "int64",
                "nullable": true
              },
              "moduleId": {
                "type": "string"
              },
              "moduleName": {
                "type": "string"
              },
              "documentType": {
                "$ref": "#/components/schemas/DocumentType"
              },
              "fileName": {
                "type": "string"
              },
              "fileUrl": {
                "type": "string"
              }
            }
          }
        ]
      },
      "DocumentType": {
        "type": "string",
        "enum": [
          "CONSENT_FORM",
          "MEDICAL_RECORD",
          "INSURANCE_CARD",
          "TEST_REEQUISITION_EFAX",
          "PHYSICIAN_ORDER",
          "LAB_RESULTS",
          "FACE_SHEET",
          "PATIENT_REPORT_PDF",
          "SUPPLEMENTAL_REPORT_PDF",
          "BIOANALYZER_PDF",
          "QUBIT_RESULT",
          "SIGNATURE",
          "VISIT_NOTE",
          "LETTER_OF_MEDICAL_NECESSITY"
        ]
      },
      "DrugDto": {
        "required": [
          "commercialName",
          "drugBankId",
          "id",
          "innName"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "drugBankId": {
            "type": "string"
          },
          "commercialName": {
            "type": "string"
          },
          "innName": {
            "type": "string"
          }
        }
      },
      "EmrInfo": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64",
            "nullable": true
          },
          "fileName": {
            "type": "string"
          },
          "minderaSampleId": {
            "type": "string"
          },
          "pidPatientIdentification": {
            "type": "string"
          },
          "testRequisitionId": {
            "type": "string"
          },
          "orcOrderControl": {
            "type": "string"
          },
          "orcOrderNumber": {
            "type": "string"
          },
          "orcPlacerGroupNumber": {
            "type": "string"
          },
          "orcTransactionTime": {
            "type": "string"
          },
          "obrPlacerOrderNumber": {
            "type": "string"
          },
          "obrFillerOrderNumber": {
            "type": "string"
          },
          "obrResultId": {
            "type": "string"
          },
          "obrResultName": {
            "type": "string"
          },
          "obrRequestedDateTime": {
            "type": "string"
          },
          "obrSpecimenReceivedDate": {
            "type": "string"
          },
          "obrResultStatus": {
            "type": "string"
          },
          "status": {
            "$ref": "#/components/schemas/EmrStatus"
          },
          "createdAt": {
            "$ref": "#/components/schemas/Timestamp"
          },
          "updatedAt": {
            "$ref": "#/components/schemas/Timestamp"
          },
          "mshSendingFacility": {
            "type": "string"
          },
          "mshReceivingFacility": {
            "type": "string"
          },
          "mshMessageControlId": {
            "type": "string"
          },
          "providerId": {
            "type": "integer",
            "format": "int64"
          }
        }
      },
      "EmrInfoDto": {
        "type": "object",
        "properties": {
          "fileName": {
            "type": "string"
          },
          "minderaSampleId": {
            "type": "string"
          },
          "testRequisitionId": {
            "type": "string"
          },
          "mshSendingFacility": {
            "type": "string"
          },
          "mshReceivingFacility": {
            "type": "string"
          },
          "mshMessageControlId": {
            "type": "string"
          },
          "providerId": {
            "type": "integer",
            "format": "int64"
          },
          "pidPatientIdentification": {
            "type": "string"
          },
          "orcOrderControl": {
            "type": "string"
          },
          "orcOrderNumber": {
            "type": "string"
          },
          "orcPlacerGroupNumber": {
            "type": "string"
          },
          "orcTransactionTime": {
            "type": "string"
          },
          "obrPlacerOrderNumber": {
            "type": "string"
          },
          "obrFillerOrderNumber": {
            "type": "string"
          },
          "obrResultId": {
            "type": "string"
          },
          "obrResultName": {
            "type": "string"
          },
          "obrRequestedDateTime": {
            "type": "string"
          },
          "obrSpecimenReceivedDate": {
            "type": "string"
          },
          "obrResultStatus": {
            "type": "string"
          },
          "status": {
            "$ref": "#/components/schemas/EmrStatus"
          },
          "createdAt": {
            "$ref": "#/components/schemas/Timestamp"
          },
          "updatedAt": {
            "$ref": "#/components/schemas/Timestamp"
          }
        }
      },
      "EmrStatus": {
        "type": "string",
        "enum": [
          "SUCCESS",
          "FAILED"
        ]
      },
      "Ethnicity": {
        "type": "string",
        "enum": [
          "AFRICAN_AMERICAN",
          "ASIAN",
          "CAUCASIAN",
          "HISPANIC",
          "OTHER"
        ]
      },
      "Gender": {
        "type": "string",
        "enum": [
          "MALE",
          "FEMALE",
          "OTHER"
        ]
      },
      "Instruments": {
        "allOf": [
          {
            "$ref": "#/components/schemas/AuditEntity"
          },
          {
            "type": "object",
            "properties": {
              "id": {
                "type": "integer",
                "format": "int64",
                "nullable": true
              },
              "instrumentType": {
                "type": "string"
              },
              "instrumentName": {
                "type": "string"
              }
            }
          }
        ]
      },
      "LdapUserController.UserParam": {
        "type": "object"
      },
      "Location": {
        "required": [
          "city",
          "country",
          "id",
          "latitude",
          "longitude",
          "state",
          "street",
          "street2",
          "zip"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "street": {
            "type": "string"
          },
          "street2": {
            "type": "string"
          },
          "city": {
            "type": "string"
          },
          "state": {
            "type": "string"
          },
          "zip": {
            "type": "string"
          },
          "country": {
            "type": "string"
          },
          "latitude": {
            "type": "number",
            "format": "double"
          },
          "longitude": {
            "type": "number",
            "format": "double"
          }
        }
      },
      "Materials": {
        "allOf": [
          {
            "$ref": "#/components/schemas/AuditEntity"
          },
          {
            "type": "object",
            "properties": {
              "id": {
                "type": "integer",
                "format": "int64",
                "nullable": true
              },
              "itemName": {
                "type": "string"
              },
              "amount": {
                "type": "number",
                "format": "float"
              },
              "materialUnit": {
                "type": "string"
              },
              "protocolReferenceId": {
                "type": "integer",
                "format": "int64"
              }
            }
          }
        ]
      },
      "Object": {
        "type": "object"
      },
      "PatientDto": {
        "required": [
          "city",
          "firstName",
          "lastName",
          "phoneNumber",
          "providerId",
          "state",
          "street",
          "zipcode"
        ],
        "type": "object",
        "properties": {
          "patientId": {
            "type": "string"
          },
          "ssn": {
            "pattern": "^(?!000|666)[0-8][0-9]{2}(-|)(?!00)[0-9]{2}(-|)(?!0000)[0-9]{4}$",
            "type": "string"
          },
          "mrn": {
            "maxLength": 50,
            "minLength": 1,
            "pattern": "[0-9A-Za-z]*$",
            "type": "string"
          },
          "firstName": {
            "minLength": 1,
            "type": "string"
          },
          "middleName": {
            "type": "string"
          },
          "lastName": {
            "minLength": 1,
            "type": "string"
          },
          "dateOfBirth": {
            "$ref": "#/components/schemas/Timestamp"
          },
          "gender": {
            "$ref": "#/components/schemas/Gender"
          },
          "weight": {
            "maximum": 1500,
            "minimum": 0.1,
            "type": "number",
            "format": "double"
          },
          "height": {
            "maximum": 150,
            "minimum": 0.1,
            "type": "number",
            "format": "double"
          },
          "phoneNumber": {
            "maxLength": 16,
            "minLength": 1,
            "type": "string"
          },
          "email": {
            "type": "string"
          },
          "ethnicity": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Ethnicity"
            }
          },
          "street": {
            "minLength": 1,
            "type": "string"
          },
          "city": {
            "minLength": 1,
            "type": "string"
          },
          "state": {
            "minLength": 1,
            "type": "string"
          },
          "zipcode": {
            "pattern": "^[0-9]{5}(?:-[0-9]{4})?$",
            "type": "string"
          },
          "bodyMasIndex": {
            "type": "number",
            "format": "double"
          },
          "providerId": {
            "type": "integer",
            "format": "int64"
          },
          "provider": {
            "$ref": "#/components/schemas/Provider"
          }
        }
      },
      "PatientReport": {
        "allOf": [
          {
            "$ref": "#/components/schemas/AuditEntity"
          },
          {
            "required": [
              "patientName",
              "sequencingSampleId",
              "testType"
            ],
            "type": "object",
            "properties": {
              "id": {
                "type": "integer",
                "format": "int64",
                "nullable": true
              },
              "minderaSampleId": {
                "type": "string"
              },
              "patientId": {
                "type": "string"
              },
              "patientName": {
                "type": "string"
              },
              "testRequisitionId": {
                "type": "string"
              },
              "patientDOB": {
                "$ref": "#/components/schemas/Timestamp"
              },
              "sampleCollectionDate": {
                "$ref": "#/components/schemas/Timestamp"
              },
              "orderingPhysicianName": {
                "type": "string"
              },
              "providerId": {
                "type": "integer",
                "format": "int64"
              },
              "providerName": {
                "type": "string"
              },
              "providerAddress1": {
                "type": "string"
              },
              "providerAddress2": {
                "type": "string"
              },
              "providerAddress3": {
                "type": "string"
              },
              "providerState": {
                "type": "string"
              },
              "providerCountry": {
                "type": "string"
              },
              "providerZipCode": {
                "type": "string"
              },
              "testType": {
                "type": "string"
              },
              "predictionResponseIl17": {
                "type": "boolean"
              },
              "predictionResponseIl23": {
                "type": "boolean"
              },
              "predictionResponseTnfa": {
                "type": "boolean"
              },
              "reportingDate": {
                "$ref": "#/components/schemas/Timestamp"
              },
              "reportVersion": {
                "type": "integer",
                "format": "int64"
              },
              "comments": {
                "type": "string"
              },
              "status": {
                "type": "string"
              },
              "ngsData": {
                "type": "string"
              },
              "ngsQcReport": {
                "type": "string"
              },
              "sequencingSampleId": {
                "type": "string"
              },
              "clinicHospitalName": {
                "type": "string"
              },
              "clinicHospitalLocation": {
                "type": "string"
              },
              "confirmationDate": {
                "$ref": "#/components/schemas/Timestamp"
              },
              "providerCity": {
                "type": "string"
              },
              "qcResult": {
                "type": "boolean"
              }
            }
          }
        ]
      },
      "PatientReportDto": {
        "type": "object",
        "properties": {
          "ids": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int64"
            }
          },
          "comments": {
            "type": "string"
          },
          "status": {
            "type": "string"
          }
        }
      },
      "PatientReportFilterDTO": {
        "type": "object",
        "properties": {
          "patientNames": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "testTypes": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "sequencingSampleIds": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "PaymentMethod": {
        "type": "string",
        "enum": [
          "INSURANCE",
          "MEDICARE",
          "SELF_PAY",
          "GUARANTOR",
          "DIRECT_CLIENT_BILL"
        ]
      },
      "Physician": {
        "allOf": [
          {
            "$ref": "#/components/schemas/AuditEntity"
          },
          {
            "type": "object",
            "properties": {
              "physicianId": {
                "type": "integer",
                "format": "int64",
                "nullable": true
              },
              "accountId": {
                "type": "string"
              },
              "physicianName": {
                "type": "string"
              },
              "physicianNpi": {
                "type": "integer",
                "format": "int64"
              },
              "practiceName": {
                "type": "string"
              },
              "isDeleted": {
                "type": "boolean"
              },
              "prefix": {
                "type": "string"
              },
              "firstName": {
                "type": "string"
              },
              "middleName": {
                "type": "string"
              },
              "lastName": {
                "type": "string"
              },
              "suffix": {
                "type": "string"
              },
              "phoneNumber": {
                "type": "string"
              },
              "email": {
                "type": "string"
              },
              "mobile": {
                "type": "string"
              }
            }
          }
        ]
      },
      "PlaceOfService": {
        "type": "string",
        "enum": [
          "MOBILE_SERVICE",
          "PROVIDER_OFFICE"
        ]
      },
      "PreferredReportResponse": {
        "type": "string",
        "enum": [
          "EMAIL",
          "EFAX",
          "EMR"
        ]
      },
      "ProtocolMaterialDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "protocolName": {
            "type": "string"
          },
          "procedureSteps": {
            "type": "string"
          },
          "materialsList": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Materials"
            }
          }
        }
      },
      "Provider": {
        "allOf": [
          {
            "$ref": "#/components/schemas/AuditEntity"
          },
          {
            "type": "object",
            "properties": {
              "providerId": {
                "type": "integer",
                "format": "int64",
                "nullable": true
              },
              "providerName": {
                "type": "string"
              },
              "npi": {
                "type": "integer",
                "format": "int64"
              },
              "address1": {
                "type": "string"
              },
              "address2": {
                "type": "string"
              },
              "address3": {
                "type": "string"
              },
              "city": {
                "type": "string"
              },
              "state": {
                "type": "string"
              },
              "zipcode": {
                "type": "string"
              },
              "country": {
                "type": "string"
              },
              "phoneNumber": {
                "type": "string"
              },
              "email": {
                "type": "string"
              },
              "contactName": {
                "type": "string"
              },
              "contactPhoneNo": {
                "type": "string"
              },
              "clientId": {
                "type": "string"
              },
              "physicians": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Physician"
                }
              },
              "efax": {
                "type": "string"
              },
              "isDeleted": {
                "type": "boolean"
              },
              "sfAccountId": {
                "type": "string"
              },
              "sftpHost": {
                "type": "string"
              },
              "sftpUsername": {
                "type": "string"
              },
              "sftpPassword": {
                "type": "string"
              },
              "sftpOrdersDir": {
                "type": "string"
              },
              "sftpResultsDir": {
                "type": "string"
              },
              "externalProviderId": {
                "type": "string"
              },
              "deleted": {
                "type": "boolean"
              }
            }
          }
        ]
      },
      "PsoriasisType": {
        "type": "string",
        "enum": [
          "PLAQUE_PSORIASIS",
          "FLEXURAL_OR_INVERSE_PSORIASIS",
          "PSORIATIC_ARTHRITIS",
          "GUTTATE_PSORIASIS",
          "PUSTULAR_PSORIASIS",
          "ERYTHRODEMIC_PSORIASIS"
        ]
      },
      "RegistrationStatus": {
        "type": "string",
        "enum": [
          "HOLD",
          "REJECT",
          "PENDING",
          "FAILED",
          "COMPLETED",
          "EXPERIMENT",
          "QUESTIONABLE",
          "NGS_RESULT_REJECTED",
          "REPORT_GENERATED",
          "REPORT_SUBMITTED",
          "REPORT_REJECTED",
          "EXPERIMENT_RNA_ELUTION",
          "EXPERIMENT_RNA_AMPLIFICATION",
          "FAILED_RNA_AMPLIFICATION",
          "FAILED_RNA_ELUTION",
          "REGISTERED",
          "CANCELED"
        ]
      },
      "RnaAmplification": {
        "allOf": [
          {
            "$ref": "#/components/schemas/AuditEntity"
          },
          {
            "required": [
              "batchId",
              "labTechnician",
              "status"
            ],
            "type": "object",
            "properties": {
              "noOfSamples": {
                "type": "string"
              },
              "batchId": {
                "type": "string"
              },
              "startDate": {
                "$ref": "#/components/schemas/Timestamp"
              },
              "endDate": {
                "$ref": "#/components/schemas/Timestamp"
              },
              "labTechnician": {
                "type": "string"
              },
              "labProtocol": {
                "type": "string"
              },
              "status": {
                "type": "string"
              },
              "sampleStorage": {
                "type": "number",
                "format": "double"
              },
              "lab": {
                "type": "string"
              },
              "barcode": {
                "type": "string"
              },
              "materialNotes": {
                "type": "string"
              },
              "rnaAmplificationNotes": {
                "type": "string"
              },
              "protocolId": {
                "type": "integer",
                "format": "int64"
              },
              "clearEndDate": {
                "type": "boolean"
              },
              "sampleIds": {
                "type": "string"
              }
            }
          }
        ]
      },
      "RnaAmplificationBatchDto": {
        "required": [
          "rnaElutionBatchIds"
        ],
        "type": "object",
        "properties": {
          "date": {
            "type": "string"
          },
          "batchId": {
            "type": "string"
          },
          "rnaElutionBatchIds": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "rnaElutionSamples": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RnaElutionSampleList"
            }
          }
        }
      },
      "RnaAmplificationCreateDto": {
        "type": "object",
        "properties": {
          "date": {
            "type": "string"
          },
          "batchId": {
            "type": "string"
          },
          "startDate": {
            "$ref": "#/components/schemas/Timestamp"
          },
          "lab": {
            "type": "string"
          },
          "labTechnician": {
            "type": "string"
          },
          "sampleStorage": {
            "type": "number",
            "format": "double"
          },
          "sampleList": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SampleListTableDto"
            }
          },
          "status": {
            "$ref": "#/components/schemas/RnaAmplificationStatus"
          },
          "rnaElutionBatchIds": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "RnaAmplificationDto": {
        "type": "object",
        "properties": {
          "batchId": {
            "type": "string"
          },
          "startDate": {
            "$ref": "#/components/schemas/Timestamp"
          },
          "endDate": {
            "$ref": "#/components/schemas/Timestamp"
          },
          "lab": {
            "type": "string"
          },
          "status": {
            "type": "string"
          },
          "labTechnician": {
            "type": "string"
          },
          "sampleStorage": {
            "type": "number",
            "format": "double"
          },
          "barcode": {
            "type": "string"
          },
          "materialNotes": {
            "type": "string"
          },
          "rnaAmplificationNotes": {
            "type": "string"
          },
          "labProtocol": {
            "type": "string"
          },
          "protocolId": {
            "type": "integer",
            "format": "int64"
          },
          "clearEndDate": {
            "type": "boolean"
          },
          "rnaAmplificationMaterialList": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RnaAmplificationMaterial"
            }
          },
          "rnaAmplificationSampleList": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RnaAmplificationSampleList"
            }
          }
        }
      },
      "RnaAmplificationMaterial": {
        "allOf": [
          {
            "$ref": "#/components/schemas/AuditEntity"
          },
          {
            "type": "object",
            "properties": {
              "id": {
                "type": "integer",
                "format": "int64",
                "nullable": true
              },
              "amount": {
                "type": "number",
                "format": "double"
              },
              "materialUnit": {
                "type": "string"
              },
              "expirationDate": {
                "$ref": "#/components/schemas/Timestamp"
              },
              "materialReferenceId": {
                "type": "integer",
                "format": "int64"
              },
              "rnaAmplificationBatchId": {
                "type": "string"
              },
              "lotNumber": {
                "type": "string"
              },
              "itemName": {
                "type": "string"
              }
            }
          }
        ]
      },
      "RnaAmplificationMaterialDto": {
        "required": [
          "amount",
          "expirationDate",
          "materialReferenceId",
          "materialUnit",
          "rnaAmplificationBatchId"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "amount": {
            "type": "number",
            "format": "double"
          },
          "expirationDate": {
            "$ref": "#/components/schemas/Timestamp"
          },
          "materialReferenceId": {
            "type": "integer",
            "format": "int64"
          },
          "rnaAmplificationBatchId": {
            "type": "string"
          },
          "itemName": {
            "type": "string"
          },
          "lotNumber": {
            "type": "string"
          },
          "materialUnit": {
            "type": "string"
          }
        }
      },
      "RnaAmplificationSampleList": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64",
            "nullable": true
          },
          "wellPosition": {
            "type": "string"
          },
          "minderaSampleId": {
            "type": "string"
          },
          "rnaSampleId": {
            "type": "string"
          },
          "subjectId": {
            "type": "string"
          },
          "dnaSampleId": {
            "type": "string"
          },
          "rnaAmplificationBatchId": {
            "type": "string"
          },
          "qc": {
            "type": "string"
          },
          "remarks": {
            "type": "string"
          },
          "concentration": {
            "type": "number",
            "format": "double"
          },
          "bioanalyzerAreaGreaterThan150": {
            "type": "integer",
            "format": "int64"
          },
          "bioanalyzerAreaGreaterThan200": {
            "type": "integer",
            "format": "int64"
          },
          "bioanalyzerAreaGreaterThan300": {
            "type": "integer",
            "format": "int64"
          },
          "bioanalyzerAreaGreaterThan700": {
            "type": "integer",
            "format": "int64"
          },
          "storageContainerId": {
            "type": "string"
          },
          "storagePosition": {
            "type": "string"
          },
          "isControlSample": {
            "type": "boolean"
          },
          "sampleGroup": {
            "type": "string"
          },
          "canceled": {
            "type": "boolean"
          },
          "projectId": {
            "type": "string"
          },
          "clientIdOrSiteId": {
            "type": "string"
          },
          "timePoint": {
            "type": "string"
          }
        }
      },
      "RnaAmplificationSampleListDto": {
        "required": [
          "datePrefix",
          "rnaAmplificationBatchId",
          "rnaAmplificationSampleList",
          "sampleListIds"
        ],
        "type": "object",
        "properties": {
          "rnaAmplificationBatchId": {
            "type": "string"
          },
          "rnaAmplificationSampleList": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RnaAmplificationSampleList"
            }
          },
          "sampleListIds": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int64"
            }
          },
          "datePrefix": {
            "minLength": 1,
            "type": "string"
          }
        }
      },
      "RnaAmplificationStatus": {
        "type": "string",
        "enum": [
          "READY_FOR_RNA_AMPLIFICATION",
          "IN_PROGRESS",
          "COMPLETED",
          "ON_HOLD",
          "CANCELED",
          "SUBMITTED_FOR_SAMPLE_ANALYSIS"
        ]
      },
      "RnaAmplificationUpdateRequestBodyDto": {
        "type": "object",
        "properties": {
          "batchIds": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "status": {
            "type": "string"
          },
          "sampleStorage": {
            "type": "number",
            "format": "double"
          },
          "startDate": {
            "$ref": "#/components/schemas/Timestamp"
          },
          "endDate": {
            "$ref": "#/components/schemas/Timestamp"
          },
          "batchNote": {
            "type": "string"
          },
          "materialNote": {
            "type": "string"
          },
          "labTechnician": {
            "type": "string"
          },
          "barCode": {
            "type": "string"
          },
          "labProtocolId": {
            "type": "string"
          }
        }
      },
      "RnaElution": {
        "allOf": [
          {
            "$ref": "#/components/schemas/AuditEntity"
          },
          {
            "required": [
              "batchId",
              "lab",
              "status"
            ],
            "type": "object",
            "properties": {
              "noOfSamples": {
                "type": "string"
              },
              "labProtocol": {
                "type": "string"
              },
              "labProtocolId": {
                "type": "integer",
                "format": "int64"
              },
              "barcode": {
                "type": "string"
              },
              "batchId": {
                "type": "string"
              },
              "startDate": {
                "$ref": "#/components/schemas/Timestamp"
              },
              "endDate": {
                "$ref": "#/components/schemas/Timestamp"
              },
              "lab": {
                "type": "string"
              },
              "status": {
                "$ref": "#/components/schemas/RnaElutionStatus"
              },
              "labTechnician": {
                "type": "string"
              },
              "sampleStorage": {
                "type": "number",
                "format": "double"
              },
              "materialNotes": {
                "type": "string"
              },
              "rnaElutionNotes": {
                "type": "string"
              },
              "sampleIds": {
                "type": "string"
              }
            }
          }
        ]
      },
      "RnaElutionCreateDto": {
        "type": "object",
        "properties": {
          "date": {
            "type": "string"
          },
          "batchId": {
            "type": "string"
          },
          "startDate": {
            "$ref": "#/components/schemas/Timestamp"
          },
          "lab": {
            "type": "string"
          },
          "labTechnician": {
            "type": "string"
          },
          "sampleStorage": {
            "type": "number",
            "format": "double"
          },
          "sampleRegistrationIdList": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SampleListTableDto"
            }
          }
        }
      },
      "RnaElutionDto": {
        "required": [
          "barCode",
          "batchId",
          "datePrefix",
          "endDate",
          "lab",
          "labProtocol",
          "labTechnician",
          "materialNotes",
          "rnaElutionInstrumentList",
          "rnaElutionMaterialList",
          "rnaElutionNotes",
          "rnaElutionSampleListList",
          "sampleStorage",
          "startDate",
          "status"
        ],
        "type": "object",
        "properties": {
          "batchId": {
            "type": "string"
          },
          "startDate": {
            "$ref": "#/components/schemas/Timestamp"
          },
          "endDate": {
            "$ref": "#/components/schemas/Timestamp"
          },
          "lab": {
            "type": "string"
          },
          "barCode": {
            "type": "string"
          },
          "status": {
            "type": "string"
          },
          "labProtocol": {
            "type": "string"
          },
          "labTechnician": {
            "type": "string"
          },
          "sampleStorage": {
            "type": "number",
            "format": "double"
          },
          "materialNotes": {
            "type": "string"
          },
          "rnaElutionNotes": {
            "type": "string"
          },
          "datePrefix": {
            "type": "string"
          },
          "rnaElutionMaterialList": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RnaElutionMaterial"
            }
          },
          "rnaElutionInstrumentList": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RnaElutionInstrument"
            }
          },
          "rnaElutionSampleListList": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RnaElutionSampleList"
            }
          }
        }
      },
      "RnaElutionInstrument": {
        "allOf": [
          {
            "$ref": "#/components/schemas/AuditEntity"
          },
          {
            "type": "object",
            "properties": {
              "id": {
                "type": "integer",
                "format": "int64",
                "nullable": true
              },
              "instrumentReferenceId": {
                "type": "integer",
                "format": "int64"
              },
              "rnaElutionBatchId": {
                "type": "string"
              }
            }
          }
        ]
      },
      "RnaElutionInstrumentDto": {
        "required": [
          "instrumentReferenceId",
          "rnaElutionBatchId"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "instrumentReferenceId": {
            "type": "integer",
            "format": "int64"
          },
          "rnaElutionBatchId": {
            "type": "string"
          },
          "instrumentType": {
            "type": "string"
          },
          "instrumentName": {
            "type": "string"
          }
        }
      },
      "RnaElutionMaterial": {
        "allOf": [
          {
            "$ref": "#/components/schemas/AuditEntity"
          },
          {
            "type": "object",
            "properties": {
              "id": {
                "type": "integer",
                "format": "int64",
                "nullable": true
              },
              "amount": {
                "type": "number",
                "format": "double"
              },
              "materialUnit": {
                "type": "string"
              },
              "expirationDate": {
                "$ref": "#/components/schemas/Timestamp"
              },
              "materialReferenceId": {
                "type": "integer",
                "format": "int64"
              },
              "rnaElutionBatchId": {
                "type": "string"
              },
              "lotNumber": {
                "type": "string"
              },
              "itemName": {
                "type": "string"
              }
            }
          }
        ]
      },
      "RnaElutionMaterialDto": {
        "required": [
          "amount",
          "expirationDate",
          "materialReferenceId",
          "materialUnit",
          "rnaElutionBatchId"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "amount": {
            "type": "number",
            "format": "double"
          },
          "expirationDate": {
            "$ref": "#/components/schemas/Timestamp"
          },
          "materialReferenceId": {
            "type": "integer",
            "format": "int64"
          },
          "rnaElutionBatchId": {
            "type": "string"
          },
          "itemName": {
            "type": "string"
          },
          "lotNumber": {
            "type": "string"
          },
          "materialUnit": {
            "type": "string"
          }
        }
      },
      "RnaElutionSampleList": {
        "allOf": [
          {
            "$ref": "#/components/schemas/AuditEntity"
          },
          {
            "type": "object",
            "properties": {
              "id": {
                "type": "integer",
                "format": "int64",
                "nullable": true
              },
              "wellPosition": {
                "type": "string"
              },
              "minderaSampleId": {
                "type": "string"
              },
              "rnaSampleId": {
                "type": "string"
              },
              "qc": {
                "type": "string"
              },
              "rnaElutionBatchId": {
                "type": "string"
              },
              "subjectId": {
                "type": "string"
              },
              "remarks": {
                "type": "string"
              },
              "elutionVolume": {
                "type": "integer",
                "format": "int64"
              },
              "sampleGroup": {
                "type": "string"
              },
              "canceled": {
                "type": "boolean"
              },
              "projectId": {
                "type": "string"
              },
              "clientIdOrSiteId": {
                "type": "string"
              },
              "timePoint": {
                "type": "string"
              }
            }
          }
        ]
      },
      "RnaElutionSampleListDto": {
        "required": [
          "datePrefix",
          "minderaSampleIdList",
          "rnaElutionBatchId",
          "rnaElutionSampleList"
        ],
        "type": "object",
        "properties": {
          "rnaElutionBatchId": {
            "type": "string"
          },
          "minderaSampleIdList": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "rnaElutionSampleList": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RnaElutionSampleList"
            }
          },
          "datePrefix": {
            "minLength": 1,
            "type": "string"
          }
        }
      },
      "RnaElutionStatus": {
        "type": "string",
        "enum": [
          "CANCELED",
          "IN_PROGRESS",
          "COMPLETED_FOR_DNA_SYNTHESIS",
          "READY_FOR_RNA_ELUTION",
          "SUBMITTED_TO_RNA_AMPLIFICATION"
        ]
      },
      "RnaElutionUpdateRequestBodyDto": {
        "type": "object",
        "properties": {
          "batchIds": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "status": {
            "type": "string"
          },
          "sampleStorage": {
            "type": "number",
            "format": "double"
          },
          "startDate": {
            "$ref": "#/components/schemas/Timestamp"
          },
          "endDate": {
            "$ref": "#/components/schemas/Timestamp"
          },
          "batchNote": {
            "type": "string"
          },
          "materialNote": {
            "type": "string"
          },
          "labTechnician": {
            "type": "string"
          },
          "barCode": {
            "type": "string"
          },
          "labProtocolId": {
            "type": "string"
          }
        }
      },
      "SalesForceClientDto": {
        "required": [
          "clientId",
          "practiceName"
        ],
        "type": "object",
        "properties": {
          "clientId": {
            "minLength": 1,
            "type": "string"
          },
          "practiceName": {
            "minLength": 1,
            "type": "string"
          },
          "accountId": {
            "type": "string"
          },
          "npi": {
            "type": "integer",
            "format": "int64"
          },
          "address": {
            "$ref": "#/components/schemas/Address"
          },
          "physicians": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SalesForcePhysician"
            }
          },
          "status": {
            "$ref": "#/components/schemas/UpsertStatus"
          },
          "externalProviderId": {
            "type": "string"
          },
          "sftpHost": {
            "type": "string"
          },
          "sftpUsername": {
            "type": "string"
          },
          "sftpPassword": {
            "type": "string"
          },
          "sftpOrdersDir": {
            "type": "string"
          },
          "sftpResultsDir": {
            "type": "string"
          }
        }
      },
      "SalesForcePhysician": {
        "required": [
          "firstName",
          "lastName",
          "npi"
        ],
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "prefix": {
            "type": "string"
          },
          "firstName": {
            "minLength": 1,
            "type": "string"
          },
          "middleName": {
            "type": "string"
          },
          "lastName": {
            "minLength": 1,
            "type": "string"
          },
          "suffix": {
            "type": "string"
          },
          "npi": {
            "type": "integer",
            "format": "int64"
          },
          "phoneNumber": {
            "type": "string"
          },
          "mobile": {
            "type": "string"
          },
          "emailAddress": {
            "type": "string"
          }
        }
      },
      "SalesForceToken": {
        "required": [
          "expirationDate",
          "token"
        ],
        "type": "object",
        "properties": {
          "token": {
            "type": "string"
          },
          "expirationDate": {
            "type": "string"
          }
        }
      },
      "SampleAnalysis": {
        "allOf": [
          {
            "$ref": "#/components/schemas/AuditEntity"
          },
          {
            "required": [
              "minderaSampleId",
              "projectId",
              "sequencingSampleId"
            ],
            "type": "object",
            "properties": {
              "sourceName": {
                "type": "string"
              },
              "timePoint": {
                "type": "string"
              },
              "sequencingSampleId": {
                "type": "string"
              },
              "qcResult": {
                "type": "boolean"
              },
              "minderaSampleId": {
                "type": "string"
              },
              "sampleAnalysisType": {
                "type": "string"
              },
              "percentageOfGenesDetected": {
                "type": "number",
                "format": "double"
              },
              "totalReads": {
                "type": "integer",
                "format": "int64"
              },
              "mappedReads": {
                "type": "integer",
                "format": "int32"
              },
              "percentageOfReadsMapped": {
                "type": "number",
                "format": "double"
              },
              "percentageUnmapped": {
                "type": "number",
                "format": "double"
              },
              "dnaSampleId": {
                "type": "string"
              },
              "projectId": {
                "type": "string"
              },
              "status": {
                "$ref": "#/components/schemas/sampleAnalysisStatus"
              },
              "predictionResponseIl17": {
                "type": "boolean"
              },
              "predictionResponseIl23": {
                "type": "boolean"
              },
              "predictionResponseTnfa": {
                "type": "boolean"
              },
              "comments": {
                "maxLength": 1000,
                "type": "string"
              },
              "testRequisitionId": {
                "type": "string"
              },
              "sampleGroup": {
                "type": "string"
              },
              "clientIdOrSiteId": {
                "type": "string"
              }
            }
          }
        ]
      },
      "SampleAnalysisDto": {
        "type": "object",
        "properties": {
          "sequencingSampleIds": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "minderaSampleId": {
            "type": "string"
          },
          "sampleAnalysisType": {
            "type": "string"
          },
          "percentageOfGenesDetected": {
            "type": "number",
            "format": "double"
          },
          "totalReads": {
            "type": "integer",
            "format": "int64"
          },
          "mappedReads": {
            "type": "string"
          },
          "percentageOfReadsMapped": {
            "type": "number",
            "format": "double"
          },
          "percentageUnmapped": {
            "type": "number",
            "format": "double"
          },
          "qcResult": {
            "type": "boolean"
          },
          "sequencingSampleId": {
            "type": "string"
          },
          "projectId": {
            "type": "string"
          },
          "clientIdOrSiteId": {
            "type": "string"
          },
          "dnaSampleId": {
            "type": "string"
          },
          "status": {
            "type": "string"
          },
          "comments": {
            "type": "string"
          },
          "timePoint": {
            "type": "string"
          }
        }
      },
      "SampleListTableDto": {
        "required": [
          "rnaSampleId",
          "rnaSampleListId",
          "wellPosition"
        ],
        "type": "object",
        "properties": {
          "wellPosition": {
            "minLength": 1,
            "type": "string"
          },
          "rnaSampleId": {
            "minLength": 1,
            "type": "string"
          },
          "rnaSampleListId": {
            "type": "integer",
            "format": "int64"
          }
        }
      },
      "SampleRegistration": {
        "allOf": [
          {
            "$ref": "#/components/schemas/AuditEntity"
          },
          {
            "required": [
              "subjectId"
            ],
            "type": "object",
            "properties": {
              "id": {
                "type": "integer",
                "format": "int64",
                "nullable": true
              },
              "subjectId": {
                "type": "string"
              },
              "minderaSampleId": {
                "type": "string"
              },
              "dateOfBirth": {
                "$ref": "#/components/schemas/Timestamp"
              },
              "gender": {
                "$ref": "#/components/schemas/Gender"
              },
              "testType": {
                "type": "string"
              },
              "sampleType": {
                "type": "string"
              },
              "lab": {
                "type": "string"
              },
              "status": {
                "$ref": "#/components/schemas/RegistrationStatus"
              },
              "rejectReason": {
                "type": "string"
              },
              "remarks": {
                "type": "string"
              },
              "group": {
                "type": "string"
              },
              "trfFilePath": {
                "type": "string"
              },
              "registeredDate": {
                "$ref": "#/components/schemas/Timestamp"
              },
              "testRequisitionId": {
                "type": "string"
              },
              "projectId": {
                "type": "string"
              },
              "clientIdOrSiteId": {
                "type": "string"
              },
              "timePoint": {
                "type": "string"
              }
            }
          }
        ]
      },
      "Source": {
        "type": "string",
        "enum": [
          "MINDERA",
          "EMR",
          "EFAX",
          "PROVIDER"
        ]
      },
      "Status": {
        "type": "string",
        "enum": [
          "IN_PROGRESS",
          "PHLEBOTOMY_IN_PROGRESS",
          "PHLEBOTOMY_RETRIEVAL_FAILED",
          "PHLEBOTOMY_UNRESPONSIVE",
          "PHLEBOTOMY_CANCELED",
          "CONFIRMED",
          "REVISED",
          "SAMPLE_RECEIVED",
          "REJECTED_SAMPLE_REGISTRATION",
          "REJECTED_RNA_ELUTION",
          "REJECTED_RNA_AMPLIFICATION",
          "PROCESSING",
          "NGS_RESULT_REJECTED",
          "REPORT_SUBMITTED",
          "REPORT_REJECTED",
          "MM_IN_PROGRESS",
          "MM_SUCCESS",
          "CANCELED"
        ]
      },
      "StatusTransitions": {
        "type": "object",
        "properties": {
          "accepted_at": {
            "$ref": "#/components/schemas/Timestamp"
          },
          "arrived_at": {
            "$ref": "#/components/schemas/Timestamp"
          },
          "available_at": {
            "$ref": "#/components/schemas/Timestamp"
          },
          "cancelled_at": {
            "$ref": "#/components/schemas/Timestamp"
          },
          "claimed_at": {
            "$ref": "#/components/schemas/Timestamp"
          },
          "completed_at": {
            "$ref": "#/components/schemas/Timestamp"
          },
          "in_progress_at": {
            "$ref": "#/components/schemas/Timestamp"
          },
          "leaving_at": {
            "$ref": "#/components/schemas/Timestamp"
          },
          "on_the_way_at": {
            "$ref": "#/components/schemas/Timestamp"
          },
          "post_appointment_at": {
            "$ref": "#/components/schemas/Timestamp"
          },
          "pre_appointment_at": {
            "$ref": "#/components/schemas/Timestamp"
          },
          "processing_at": {
            "$ref": "#/components/schemas/Timestamp"
          },
          "published_at": {
            "$ref": "#/components/schemas/Timestamp"
          },
          "ready_for_appointment_at": {
            "$ref": "#/components/schemas/Timestamp"
          },
          "shipping_at": {
            "$ref": "#/components/schemas/Timestamp"
          }
        }
      },
      "StatusUpdateAllDto": {
        "required": [
          "sampleRegistrationIds",
          "status"
        ],
        "type": "object",
        "properties": {
          "sampleRegistrationIds": {
            "minItems": 1,
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int64"
            }
          },
          "status": {
            "minLength": 1,
            "type": "string"
          },
          "rejectReason": {
            "type": "string"
          }
        }
      },
      "StatusUpdateDto": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string"
          },
          "rejectReason": {
            "type": "string"
          }
        }
      },
      "Step": {
        "type": "string",
        "enum": [
          "PATIENT",
          "PAYMENT",
          "PHYSICIAN",
          "SPECIMEN",
          "TEST",
          "ORDER"
        ]
      },
      "SubmitToNgsSampleAnalysisDto": {
        "required": [
          "amplificationBatchId",
          "barcode",
          "clientIdOrSiteId",
          "concentration",
          "dnaSampleId",
          "isCanceled",
          "minderaSampleId",
          "projectId",
          "rnaAmplificationCompletedDate",
          "rnaSampleId",
          "sampleGroup",
          "wellLocation"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "sequencingSampleId": {
            "type": "string"
          },
          "amplificationBatchId": {
            "minLength": 1,
            "type": "string"
          },
          "barcode": {
            "minLength": 1,
            "type": "string"
          },
          "wellLocation": {
            "minLength": 1,
            "type": "string"
          },
          "sampleGroup": {
            "minLength": 1,
            "type": "string"
          },
          "minderaSampleId": {
            "minLength": 1,
            "type": "string"
          },
          "projectId": {
            "minLength": 1,
            "type": "string"
          },
          "clientIdOrSiteId": {
            "minLength": 1,
            "type": "string"
          },
          "rnaSampleId": {
            "minLength": 1,
            "type": "string"
          },
          "dnaSampleId": {
            "minLength": 1,
            "type": "string"
          },
          "concentration": {
            "type": "number",
            "format": "double"
          },
          "rnaAmplificationCompletedDate": {
            "minLength": 1,
            "type": "string",
            "format": "date-time"
          },
          "isCanceled": {
            "type": "boolean"
          },
          "timePoint": {
            "type": "string"
          },
          "submittedDate": {
            "type": "string",
            "format": "date-time"
          },
          "rejectedDate": {
            "type": "string",
            "format": "date-time"
          },
          "sampleAnalysisStatus": {
            "$ref": "#/components/schemas/SubmitToNgsSampleAnalysisStatus"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "SubmitToNgsSampleAnalysisStatus": {
        "type": "string",
        "enum": [
          "SUBMITTED",
          "PENDING",
          "REJECTED"
        ]
      },
      "SubmitToNgsSampleAnalysisUpdateDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int64"
            }
          },
          "sampleAnalysisStatus": {
            "type": "string"
          }
        }
      },
      "SubmitToNgsSampleDto": {
        "type": "object",
        "properties": {
          "barcode": {
            "type": "string"
          },
          "samples": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SubmitToNgsSampleAnalysisDto"
            }
          }
        }
      },
      "TestDto": {
        "type": "object",
        "properties": {
          "intakeId": {
            "type": "integer",
            "format": "int64"
          },
          "status": {
            "type": "string"
          },
          "barcode": {
            "type": "string"
          },
          "appointment": {
            "$ref": "#/components/schemas/Appointment"
          }
        }
      },
      "TestRequisitionRevision": {
        "allOf": [
          {
            "$ref": "#/components/schemas/AuditEntity"
          },
          {
            "type": "object",
            "properties": {
              "hasPatientBeenOnSystemicOrBiologic": {
                "type": "boolean"
              },
              "drugs": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "testRequisitionId": {
                "type": "string"
              },
              "revisionNumber": {
                "type": "integer",
                "format": "int64"
              },
              "step": {
                "$ref": "#/components/schemas/Step"
              },
              "status": {
                "$ref": "#/components/schemas/Status"
              },
              "diseaseId": {
                "type": "string"
              },
              "providerId": {
                "type": "integer",
                "format": "int64"
              },
              "provider": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/Provider"
                  },
                  {
                    "nullable": true
                  }
                ]
              },
              "confirmationDate": {
                "$ref": "#/components/schemas/Timestamp"
              },
              "confirmationClinicianName": {
                "type": "string"
              },
              "preferredReportResponse": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "confirmedUserId": {
                "type": "string"
              },
              "patientId": {
                "type": "string"
              },
              "ssn": {
                "type": "string"
              },
              "mrn": {
                "type": "string"
              },
              "firstName": {
                "type": "string"
              },
              "middleName": {
                "type": "string"
              },
              "lastName": {
                "type": "string"
              },
              "dateOfBirth": {
                "$ref": "#/components/schemas/Timestamp"
              },
              "gender": {
                "$ref": "#/components/schemas/Gender"
              },
              "weight": {
                "type": "number",
                "format": "double"
              },
              "height": {
                "type": "number",
                "format": "double"
              },
              "phoneNumber": {
                "type": "string"
              },
              "email": {
                "type": "string"
              },
              "street": {
                "type": "string"
              },
              "city": {
                "type": "string"
              },
              "state": {
                "type": "string"
              },
              "zipcode": {
                "type": "string"
              },
              "bodyMasIndex": {
                "type": "number",
                "format": "double"
              },
              "primaryPaymentMethod": {
                "$ref": "#/components/schemas/PaymentMethod"
              },
              "primaryInsuranceId": {
                "type": "integer",
                "format": "int64"
              },
              "primaryInsuranceCompany": {
                "type": "string"
              },
              "primaryInsuranceSubscriberDateOfBirth": {
                "$ref": "#/components/schemas/Timestamp"
              },
              "primaryInsuranceSubscriberId": {
                "type": "string"
              },
              "primaryInsuranceGroupNo": {
                "type": "string"
              },
              "secondaryInsuranceId": {
                "type": "integer",
                "format": "int64"
              },
              "secondaryInsuranceCompany": {
                "type": "string"
              },
              "secondaryInsuranceSubscriberDateOfBirth": {
                "$ref": "#/components/schemas/Timestamp"
              },
              "secondaryInsuranceSubscriberId": {
                "type": "string"
              },
              "secondaryInsuranceGroupNo": {
                "type": "string"
              },
              "physicianId": {
                "type": "integer",
                "format": "int64"
              },
              "physician": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/Physician"
                  },
                  {
                    "nullable": true
                  }
                ]
              },
              "sampleCollectionDate": {
                "$ref": "#/components/schemas/Timestamp"
              },
              "tubeLabel": {
                "type": "string"
              },
              "barcode": {
                "type": "string"
              },
              "bodyLocationName": {
                "type": "string"
              },
              "bodyLocationOther": {
                "type": "string"
              },
              "psoriasisType": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "psoriasisTypeOther": {
                "type": "string"
              },
              "deleted": {
                "type": "boolean"
              },
              "ethnicity": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "source": {
                "$ref": "#/components/schemas/Source"
              },
              "preferredReportResponseEmail": {
                "type": "string"
              },
              "preferredReportResponseEfax": {
                "type": "string"
              },
              "placeOfService": {
                "type": "string"
              },
              "primaryInsuredRelationship": {
                "type": "string"
              },
              "primaryInsuranceSubscriberFirstName": {
                "type": "string"
              },
              "primaryInsuranceSubscriberMiddleName": {
                "type": "string"
              },
              "primaryInsuranceSubscriberLastName": {
                "type": "string"
              },
              "secondaryInsuredRelationship": {
                "type": "string"
              },
              "secondaryInsuranceSubscriberFirstName": {
                "type": "string"
              },
              "secondaryInsuranceSubscriberMiddleName": {
                "type": "string"
              },
              "secondaryInsuranceSubscriberLastName": {
                "type": "string"
              },
              "primaryInsuranceSubscriberGender": {
                "$ref": "#/components/schemas/Gender"
              },
              "secondaryInsuranceSubscriberGender": {
                "$ref": "#/components/schemas/Gender"
              },
              "primaryInsuranceStreet": {
                "type": "string"
              },
              "primaryInsuranceCity": {
                "type": "string"
              },
              "primaryInsuranceState": {
                "type": "string"
              },
              "primaryInsuranceZipcode": {
                "type": "string"
              },
              "primaryGuarantorFirstName": {
                "type": "string"
              },
              "primaryGuarantorMiddleName": {
                "type": "string"
              },
              "primaryGuarantorLastName": {
                "type": "string"
              },
              "primaryGuarantorDob": {
                "$ref": "#/components/schemas/Timestamp"
              },
              "primaryGuarantorGender": {
                "$ref": "#/components/schemas/Gender"
              },
              "primaryGuarantorStreet": {
                "type": "string"
              },
              "primaryGuarantorCity": {
                "type": "string"
              },
              "primaryGuarantorState": {
                "type": "string"
              },
              "primaryGuarantorZipcode": {
                "type": "string"
              },
              "primaryGuarantorEmail": {
                "type": "string"
              },
              "primaryGuarantorPhone": {
                "type": "string"
              },
              "secondaryPaymentMethod": {
                "$ref": "#/components/schemas/PaymentMethod"
              },
              "secondaryInsuranceStreet": {
                "type": "string"
              },
              "secondaryInsuranceCity": {
                "type": "string"
              },
              "secondaryInsuranceState": {
                "type": "string"
              },
              "secondaryInsuranceZipcode": {
                "type": "string"
              },
              "secondaryGuarantorFirstName": {
                "type": "string"
              },
              "secondaryGuarantorMiddleName": {
                "type": "string"
              },
              "secondaryGuarantorLastName": {
                "type": "string"
              },
              "secondaryGuarantorDob": {
                "$ref": "#/components/schemas/Timestamp"
              },
              "secondaryGuarantorGender": {
                "$ref": "#/components/schemas/Gender"
              },
              "secondaryGuarantorStreet": {
                "type": "string"
              },
              "secondaryGuarantorCity": {
                "type": "string"
              },
              "secondaryGuarantorState": {
                "type": "string"
              },
              "secondaryGuarantorZipcode": {
                "type": "string"
              },
              "secondaryGuarantorEmail": {
                "type": "string"
              },
              "secondaryGuarantorPhone": {
                "type": "string"
              },
              "primaryGuarantorInsuredRelationship": {
                "type": "string"
              },
              "secondaryGuarantorInsuredRelationship": {
                "type": "string"
              },
              "isDeleted": {
                "type": "boolean"
              },
              "psoriasisTypeLabel": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "directClientBillSecondaryPharmacyBenefitManagement": {
                "type": "string"
              },
              "directClientBillSecondaryInsuranceId": {
                "type": "integer",
                "format": "int64"
              },
              "directClientBillSecondaryInsuranceCompany": {
                "type": "string"
              },
              "directClientBillSecondaryInsuredRelationship": {
                "type": "string"
              },
              "directClientBillSecondaryInsuranceSubscriberFirstName": {
                "type": "string"
              },
              "directClientBillSecondaryInsuranceSubscriberMiddleName": {
                "type": "string"
              },
              "directClientBillSecondaryInsuranceSubscriberLastName": {
                "type": "string"
              },
              "directClientBillSecondaryInsuranceSubscriberDateOfBirth": {
                "$ref": "#/components/schemas/Timestamp"
              },
              "directClientBillSecondaryInsuranceSubscriberGender": {
                "$ref": "#/components/schemas/Gender"
              },
              "directClientBillSecondaryInsuranceSubscriberId": {
                "type": "string"
              },
              "directClientBillSecondaryInsuranceGroupNo": {
                "type": "string"
              },
              "directClientBillSecondaryInsuranceStreet": {
                "type": "string"
              },
              "directClientBillSecondaryInsuranceCity": {
                "type": "string"
              },
              "directClientBillSecondaryInsuranceState": {
                "type": "string"
              },
              "directClientBillSecondaryInsuranceZipcode": {
                "type": "string"
              },
              "directClientBillPrimaryPharmacyBenefitManagement": {
                "type": "string"
              },
              "directClientBillPrimaryInsuranceId": {
                "type": "integer",
                "format": "int64"
              },
              "directClientBillPrimaryInsuranceCompany": {
                "type": "string"
              },
              "directClientBillPrimaryInsuredRelationship": {
                "type": "string"
              },
              "directClientBillPrimaryInsuranceSubscriberFirstName": {
                "type": "string"
              },
              "directClientBillPrimaryInsuranceSubscriberMiddleName": {
                "type": "string"
              },
              "directClientBillPrimaryInsuranceSubscriberLastName": {
                "type": "string"
              },
              "directClientBillPrimaryInsuranceSubscriberDateOfBirth": {
                "$ref": "#/components/schemas/Timestamp"
              },
              "directClientBillPrimaryInsuranceSubscriberGender": {
                "$ref": "#/components/schemas/Gender"
              },
              "directClientBillPrimaryInsuranceSubscriberId": {
                "type": "string"
              },
              "directClientBillPrimaryInsuranceGroupNo": {
                "type": "string"
              },
              "directClientBillPrimaryInsuranceStreet": {
                "type": "string"
              },
              "directClientBillPrimaryInsuranceCity": {
                "type": "string"
              },
              "directClientBillPrimaryInsuranceState": {
                "type": "string"
              },
              "directClientBillPrimaryInsuranceZipcode": {
                "type": "string"
              },
              "directClientBillSecondaryRxbin": {
                "type": "string"
              },
              "directClientBillSecondaryRxpcn": {
                "type": "string"
              },
              "directClientBillPrimaryRxbin": {
                "type": "string"
              },
              "directClientBillPrimaryRxpcn": {
                "type": "string"
              }
            }
          }
        ]
      },
      "TestRequisitionRevisionDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "testRequisitionId": {
            "type": "string"
          },
          "revisionNumber": {
            "type": "integer",
            "format": "int64"
          },
          "step": {
            "$ref": "#/components/schemas/Step"
          },
          "status": {
            "$ref": "#/components/schemas/Status"
          },
          "diseaseId": {
            "type": "string"
          },
          "providerId": {
            "type": "integer",
            "format": "int64"
          },
          "confirmationDate": {
            "$ref": "#/components/schemas/Timestamp"
          },
          "confirmationClinicianName": {
            "type": "string"
          },
          "preferredReportResponse": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PreferredReportResponse"
            }
          },
          "preferredReportResponseEmail": {
            "type": "string"
          },
          "preferredReportResponseEfax": {
            "type": "string"
          },
          "confirmedUserId": {
            "type": "integer",
            "format": "int64"
          },
          "patientId": {
            "type": "string"
          },
          "ssn": {
            "type": "string"
          },
          "mrn": {
            "type": "string"
          },
          "firstName": {
            "type": "string"
          },
          "middleName": {
            "type": "string"
          },
          "lastName": {
            "type": "string"
          },
          "dateOfBirth": {
            "$ref": "#/components/schemas/Timestamp"
          },
          "patientSampleCollectedDate": {
            "$ref": "#/components/schemas/Timestamp"
          },
          "gender": {
            "$ref": "#/components/schemas/Gender"
          },
          "weight": {
            "type": "number",
            "format": "double"
          },
          "height": {
            "type": "number",
            "format": "double"
          },
          "phoneNumber": {
            "type": "string"
          },
          "email": {
            "type": "string"
          },
          "ethnicity": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Ethnicity"
            }
          },
          "street": {
            "type": "string"
          },
          "city": {
            "type": "string"
          },
          "state": {
            "type": "string"
          },
          "zipcode": {
            "type": "string"
          },
          "bodyMasIndex": {
            "type": "number",
            "format": "double"
          },
          "primaryPaymentMethod": {
            "$ref": "#/components/schemas/PaymentMethod"
          },
          "primaryInsuranceId": {
            "type": "integer",
            "format": "int64"
          },
          "primaryPharmacyBenefitManagement": {
            "type": "string"
          },
          "primaryInsuranceCompany": {
            "type": "string"
          },
          "primaryInsuredRelationship": {
            "type": "string"
          },
          "primaryInsuranceSubscriberFirstName": {
            "type": "string"
          },
          "primaryInsuranceSubscriberMiddleName": {
            "type": "string"
          },
          "primaryInsuranceSubscriberLastName": {
            "type": "string"
          },
          "primaryInsuranceSubscriberDateOfBirth": {
            "$ref": "#/components/schemas/Timestamp"
          },
          "primaryInsuranceSubscriberGender": {
            "$ref": "#/components/schemas/Gender"
          },
          "primaryInsuranceSubscriberId": {
            "type": "string"
          },
          "primaryInsuranceGroupNo": {
            "type": "string"
          },
          "primaryInsuranceStreet": {
            "type": "string"
          },
          "primaryInsuranceCity": {
            "type": "string"
          },
          "primaryInsuranceState": {
            "type": "string"
          },
          "primaryInsuranceZipcode": {
            "type": "string"
          },
          "primaryGuarantorFirstName": {
            "type": "string"
          },
          "primaryGuarantorMiddleName": {
            "type": "string"
          },
          "primaryGuarantorLastName": {
            "type": "string"
          },
          "primaryGuarantorDob": {
            "$ref": "#/components/schemas/Timestamp"
          },
          "primaryGuarantorGender": {
            "$ref": "#/components/schemas/Gender"
          },
          "primaryGuarantorStreet": {
            "type": "string"
          },
          "primaryGuarantorCity": {
            "type": "string"
          },
          "primaryGuarantorState": {
            "type": "string"
          },
          "primaryGuarantorZipcode": {
            "type": "string"
          },
          "primaryGuarantorEmail": {
            "type": "string"
          },
          "primaryGuarantorPhone": {
            "type": "string"
          },
          "primaryGuarantorInsuredRelationship": {
            "type": "string"
          },
          "secondaryPaymentMethod": {
            "$ref": "#/components/schemas/PaymentMethod"
          },
          "secondaryInsuranceId": {
            "type": "integer",
            "format": "int64"
          },
          "secondaryPharmacyBenefitManagement": {
            "type": "string"
          },
          "secondaryInsuranceCompany": {
            "type": "string"
          },
          "secondaryInsuredRelationship": {
            "type": "string"
          },
          "secondaryInsuranceSubscriberFirstName": {
            "type": "string"
          },
          "secondaryInsuranceSubscriberMiddleName": {
            "type": "string"
          },
          "secondaryInsuranceSubscriberLastName": {
            "type": "string"
          },
          "secondaryInsuranceSubscriberDateOfBirth": {
            "$ref": "#/components/schemas/Timestamp"
          },
          "secondaryInsuranceSubscriberGender": {
            "$ref": "#/components/schemas/Gender"
          },
          "secondaryInsuranceSubscriberId": {
            "type": "string"
          },
          "secondaryInsuranceGroupNo": {
            "type": "string"
          },
          "secondaryInsuranceStreet": {
            "type": "string"
          },
          "secondaryInsuranceCity": {
            "type": "string"
          },
          "secondaryInsuranceState": {
            "type": "string"
          },
          "secondaryInsuranceZipcode": {
            "type": "string"
          },
          "secondaryGuarantorFirstName": {
            "type": "string"
          },
          "secondaryGuarantorMiddleName": {
            "type": "string"
          },
          "secondaryGuarantorLastName": {
            "type": "string"
          },
          "secondaryGuarantorDob": {
            "$ref": "#/components/schemas/Timestamp"
          },
          "secondaryGuarantorGender": {
            "$ref": "#/components/schemas/Gender"
          },
          "secondaryGuarantorStreet": {
            "type": "string"
          },
          "secondaryGuarantorCity": {
            "type": "string"
          },
          "secondaryGuarantorState": {
            "type": "string"
          },
          "secondaryGuarantorZipcode": {
            "type": "string"
          },
          "secondaryGuarantorEmail": {
            "type": "string"
          },
          "secondaryGuarantorPhone": {
            "type": "string"
          },
          "secondaryGuarantorInsuredRelationship": {
            "type": "string"
          },
          "physicianId": {
            "type": "integer",
            "format": "int64"
          },
          "sampleCollectionDate": {
            "$ref": "#/components/schemas/Timestamp"
          },
          "tubeLabel": {
            "type": "string"
          },
          "barcode": {
            "type": "string"
          },
          "bodyLocationName": {
            "type": "string"
          },
          "bodyLocationOther": {
            "type": "string"
          },
          "placeOfService": {
            "$ref": "#/components/schemas/PlaceOfService"
          },
          "psoriasisType": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PsoriasisType"
            }
          },
          "psoriasisTypeOther": {
            "type": "string"
          },
          "psoriasisTypeOtherLabel": {
            "type": "string"
          },
          "hasPatientBeenOnSystemicOrBiologic": {
            "type": "boolean"
          },
          "drugs": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "providerName": {
            "type": "string"
          },
          "providerNpi": {
            "type": "integer",
            "format": "int64"
          },
          "providerAddress1": {
            "type": "string"
          },
          "providerAddress2": {
            "type": "string"
          },
          "providerAddress3": {
            "type": "string"
          },
          "providerState": {
            "type": "string"
          },
          "providerZipcode": {
            "type": "string"
          },
          "providerCountry": {
            "type": "string"
          },
          "providerPhoneNumber": {
            "type": "string"
          },
          "providerEmail": {
            "type": "string"
          },
          "providerContactName": {
            "type": "string"
          },
          "providerContactPhoneNo": {
            "type": "string"
          },
          "providerClientId": {
            "type": "string"
          },
          "efax": {
            "type": "string"
          },
          "physicianName": {
            "type": "string"
          },
          "physicianAccountId": {
            "type": "string"
          },
          "physicianNpi": {
            "type": "integer",
            "format": "int64"
          },
          "source": {
            "$ref": "#/components/schemas/Source"
          },
          "practiceName": {
            "type": "string"
          },
          "wpStatus": {
            "type": "string"
          },
          "wpIntakeId": {
            "type": "integer",
            "format": "int64"
          },
          "providerViewStatus": {
            "type": "string"
          },
          "directClientBillSecondaryPharmacyBenefitManagement": {
            "type": "string"
          },
          "directClientBillSecondaryInsuranceId": {
            "type": "integer",
            "format": "int64"
          },
          "directClientBillSecondaryInsuranceCompany": {
            "type": "string"
          },
          "directClientBillSecondaryInsuredRelationship": {
            "type": "string"
          },
          "directClientBillSecondaryInsuranceSubscriberFirstName": {
            "type": "string"
          },
          "directClientBillSecondaryInsuranceSubscriberMiddleName": {
            "type": "string"
          },
          "directClientBillSecondaryInsuranceSubscriberLastName": {
            "type": "string"
          },
          "directClientBillSecondaryInsuranceSubscriberDateOfBirth": {
            "$ref": "#/components/schemas/Timestamp"
          },
          "directClientBillSecondaryInsuranceSubscriberGender": {
            "$ref": "#/components/schemas/Gender"
          },
          "directClientBillSecondaryInsuranceSubscriberId": {
            "type": "string"
          },
          "directClientBillSecondaryInsuranceGroupNo": {
            "type": "string"
          },
          "directClientBillSecondaryInsuranceStreet": {
            "type": "string"
          },
          "directClientBillSecondaryInsuranceCity": {
            "type": "string"
          },
          "directClientBillSecondaryInsuranceState": {
            "type": "string"
          },
          "directClientBillSecondaryInsuranceZipcode": {
            "type": "string"
          },
          "directClientBillSecondaryRxbin": {
            "type": "string"
          },
          "directClientBillSecondaryRxpcn": {
            "type": "string"
          },
          "directClientBillPrimaryPharmacyBenefitManagement": {
            "type": "string"
          },
          "directClientBillPrimaryInsuranceId": {
            "type": "integer",
            "format": "int64"
          },
          "directClientBillPrimaryInsuranceCompany": {
            "type": "string"
          },
          "directClientBillPrimaryInsuredRelationship": {
            "type": "string"
          },
          "directClientBillPrimaryInsuranceSubscriberFirstName": {
            "type": "string"
          },
          "directClientBillPrimaryInsuranceSubscriberMiddleName": {
            "type": "string"
          },
          "directClientBillPrimaryInsuranceSubscriberLastName": {
            "type": "string"
          },
          "directClientBillPrimaryInsuranceSubscriberDateOfBirth": {
            "$ref": "#/components/schemas/Timestamp"
          },
          "directClientBillPrimaryInsuranceSubscriberGender": {
            "$ref": "#/components/schemas/Gender"
          },
          "directClientBillPrimaryInsuranceSubscriberId": {
            "type": "string"
          },
          "directClientBillPrimaryInsuranceGroupNo": {
            "type": "string"
          },
          "directClientBillPrimaryInsuranceStreet": {
            "type": "string"
          },
          "directClientBillPrimaryInsuranceCity": {
            "type": "string"
          },
          "directClientBillPrimaryInsuranceState": {
            "type": "string"
          },
          "directClientBillPrimaryInsuranceZipcode": {
            "type": "string"
          },
          "directClientBillPrimaryRxbin": {
            "type": "string"
          },
          "directClientBillPrimaryRxpcn": {
            "type": "string"
          }
        }
      },
      "TestRequisitionSampleDto": {
        "required": [
          "group",
          "lab",
          "minderaSampleId",
          "sampleType",
          "subjectId"
        ],
        "type": "object",
        "properties": {
          "lab": {
            "type": "string"
          },
          "group": {
            "type": "string"
          },
          "gender": {
            "$ref": "#/components/schemas/Gender"
          },
          "minderaSampleId": {
            "type": "string"
          },
          "subjectId": {
            "type": "string"
          },
          "sampleType": {
            "type": "string"
          },
          "dateOfBirth": {
            "$ref": "#/components/schemas/Timestamp"
          }
        }
      },
      "Timestamp": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Date"
          },
          {
            "type": "object",
            "properties": {
              "time": {
                "type": "integer",
                "format": "int64"
              },
              "nanos": {
                "type": "integer",
                "format": "int32"
              }
            }
          }
        ]
      },
      "UpsertStatus": {
        "type": "string",
        "enum": [
          "CREATED",
          "UPDATED"
        ]
      },
      "UsernamePasswordCredentials": {
        "required": [
          "password",
          "username"
        ],
        "type": "object",
        "properties": {
          "username": {
            "minLength": 1,
            "type": "string"
          },
          "password": {
            "minLength": 1,
            "type": "string"
          },
          "identity": {
            "type": "string"
          },
          "secret": {
            "type": "string"
          }
        }
      },
      "WebhookResponse": {
        "type": "object",
        "properties": {
          "action": {
            "type": "string"
          },
          "type": {
            "type": "string"
          },
          "eventTs": {
            "type": "integer",
            "format": "int64"
          },
          "data": {
            "$ref": "#/components/schemas/Appointment"
          }
        }
      },
      "sampleAnalysisStatus": {
        "type": "string",
        "enum": [
          "RESULT_APPROVED",
          "REVIEW_PENDING",
          "REJECTED",
          "CANCELED"
        ]
      }
    }
  }
}
